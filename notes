
2013-05-21
----------

DISCUSS:

  + Paul has got the legend-with-transparent-background going
    (involves non-trivial usage of masking!)
  
  + Make drawDef() methods call grid:::force() ??

  + It seems that neither gecko (firefox ) nor webkit (chrome) have     
    implemented "BackgroundImage" as a filter input for SVG (yet)

    https://developer.mozilla.org/en-US/docs/SVG_in_Firefox

    http://www.webkit.org/projects/svg/status.xml
    https://bugs.webkit.org/show_bug.cgi?id=6022

  + It also seems that Firefox has not (yet) implemented document
    fragments for <feImage> elements 
    BUT chrome seems to do the job nicely


2013-05-14
----------

DONE:

  + thesis writing 
    - more drafting of introduction
    - incorporation of more tech reports
    - start on "Reference Objects" chapter


2013-05-06
----------

DISCUSS:

  + GSoC

  + Other work
    - nvd3, polycharts, etc (lots of javascript libraries built on d3)
    - are there any benefits from (the gridSVG approach of producing)
      SvG + javascript compared to the "pure javascript" approaches ?
      + e.g., you can't view a pure javascript image in Inkscape (?)
      + of course, we get all (grid-based) R graphics too !!!


DONE:

  + thesis writing 
    - draft of introduction
    - incorporation of three tech reports

  + gridSVG
    - "localize" positioning and size of Reference objects


FOR NOTING:

  + Gabriel Becker on R-devel 2013-05-04 talking about R in browser ...

    "direct control of the DOM via R code (allowing statisticians to
     script entire pages using a language they are more comfortable
     with), the use of R functions directly as event handlers,
     including for super high-frequency events such as mousemove
     (which is infeasible in server based approaches due to the
     required round-trip), and interactive versions of actual R plots
     (drawn with standard R plotting code), drawn directly to the page
     via graphics devices which draw primitives via Javascript, among
     other things"

    Simon Urbanek follow up on r-devel ...

    "This has been attempted quite a few times - literally by the
     canvas package (in generates JavaScript) and in more general
     terms by using SVG (this was way back when it was en vogue). The
     problem is that by design R plots lack the link between data and
     the objects drawn so you can only add a small amount of
     interactivity to very specific plots by hand-crafing the links or
     by trying to apply some heuristics, but it doesn't work in
     general. That's why all the web-baed interactive graphics
     typically do it the other way around - define JS-based primitives
     with interactions and build plots from this. You actually get
     nice interactive graphics, but you can't re-use R-based graphics
     (other than re-drawing it interactively, but that's another
     story)."

    Gabriel's rebuttal ...

    "I have a working graphics device that ships with RBrowserPlugin
     which both draws directly into the page via the Raphael js
     library (which plots to the page via dynamic SVG) and keeps
     references to the drawn objects around (which is only possible
     because R can see JS objects and vice-versa).

     It is a proof-of-concept, but it allows us to add event handlers
     directly to elements in the plot (and these event handlers can be
     R functions), and also allows the plot to be updated, including
     the removal and alteration of individual elements, all via R code
     *without* redraws or intermediary files.

     An abstraction layer could certainly be added which formalizes
     the relationship between the data and the plot elements, but this
     seems largely orthogonal to the technology used to do the
     actually plotting, and we can do quite a bit even without it. And
     if it were added, we could add it in R, and use R computations
     within it, something that wouldn't work if we are generating
     strings of JS code and then evaluating them as an entirely
     separate action in order to make the graphics, because R cannot
     see the plotted elements at all in this case.

     The tightly-coupled client-side approach also allows R and Web
     tech to actually interoperate (a Google Maps display directly
     controlled and and plotted to via R code in real time in response
     to user interactions), instead of simply operating side-by-side.

     Javascript visualization technologies are great, but I don't see
     why that should prevent us from seeing how much we can leverage
     of R's extensive statistical visualization capabilities when
     creating interactive graphics for the web. Also, with the
     client-side approach we can create AND interact with/modify JS
     visualizations via R if we do want to go that route, or we can
     code in JS but have some computations performed in R with 0
     latency (e.g. using an R function within a D3 visualization
     without taking a performance hit).

     The client side approach has weaknesses, absolutely, and perhaps
     they are even fatal for some use-cases, but I would argue that
     more options is very rarely a bad thing, and that, with all due
     respect, things are perhaps not quite so clear cut as your
     previous message suggested."

  + Simon Urbanek's 'RCloud' 

    http://stats.research.att.com/RCloud/

    "It uses WebSockets to talk to R either locally or on a
     server. The nice thing about using WS is that you can leverage
     large clusters - are not tied to the local machine. Also it
     allows you to get the benefits of both worlds: R for computation
     + static graphics while allowing you do to cool interactive
     graphics in JavaScript. RCloud is something like iPython notebook
     but based on R with extra interactive graphics."  
     Simon R-devel 2013-05-04

     Looks like he gave a talk on RCloud at useR! 2012, but no slides
     are available (from the conference web site)

  + Gabriel Becker's 'RFirefox' (R inside Firefox) getting close to release?

    https://github.com/gmbecker/RFirefox


2013-04-30
----------

Discussed organisation of thesis introduction
(see ../overview-sketch.pdf)


DISCUSS:

  + GSoC

  + Problem (?) with viewportConvertX(vpname, x, from="svg", to="native") 


FOR NOTING:

  + The 'rCharts' project 

    http://ramnathv.github.io/rCharts/

    Based on polychart2.js

    https://github.com/Polychart/polychart2

  + There are also 'rHighcharts' and 'rVega' packages

  + And 'xCharts' ...

    http://tenxer.github.io/xcharts/


2013-04-23
----------

DISCUSS:

  + New thesis submission rules (3 soft-cover copies NOT 2 hard-cover)

  + Does the 'prefix' go on the 'id' for the top-level <svg> element?

  + Useful area of application for fancy graphics tricks is drawing
    node-and-edge graphs;  they often like to draw fancy-looking nodes
    (e.g., that look like buttons with drop shadows)

    - See ../Resources/journal.pcbi.1000385.pdf

  + Teaching demo wanted by Andrew Balemi:
    "scatterplot of bivariate normal;  slider on x-axis;  
     histogram of marginal distribution (based on x-pos of slider)
     to the left (or right) of scatterplot"

  + Make sure examples of "real" use get put into thesis:
    - Tim Brocks' "datatodisplay" http://datatodisplay.com/
    - Jay Emerson's stuff (look up link)
    - Paul Behren's zoomable maps for Royal Society

  + Take a look at Ben Fry's PhD Thesis (on "processing")
    to help with defining the "context" and "relevance" of some
    of Simon's work on 'gridSVG'
    + Computational Information Design
    + The "refine" step in his "Process"

  + Processing examples may provide some useful examples of applications
    of fancier graphics (?)

    - http://www.processing.org/exhibition/

    Also see Flowing Data ?

    - http://flowingdata.com/

  + Google Summer of Code


TODO:

  + Write thesis

  + Add the 'prefix' as 'id' for the top-level <svg> (if specified)

  + Add to gridSVG id generation tech report the fact that there is
    now a 'prefix' argument for ids

    - Also add section describing addition of "class" information

  + push version 1.1-0 to CRAN 
    (WITH 'depends:  R (< 3.0)')
    - waiting for fix to 'XML' bug

  + merge github version back to R-Forge

  + push version 1.2-0 to CRAN 

  + Tech Reports: (?)
    - a discussion of how to select SVG elements produced by 'gridSVG'
      + by id (refer to separate doc)
      + by class (?)
      + by SVG element
      + by structure (nesting)
    - knitr hook for gridSVG
    - new SVG features in gridSVG
      + including fill patterns, filters, path clipping, elementGrob(), ...
    
  + create grobToSVG() function ?
    - x = a grob or gTree
    - width + height give you where to draw
    - gridToSVG() would call this (?)

  + Some ideas ...
    - scale up sampling variation to longer animation;  does it scale?
    - can you provide a simpler interface for describing the
      animation actions?
    - can you abstract out another step in the animation description?
      e.g., WHAT you are animating from HOW you are animating it

  + Ideas for another dynamically updating web graphic welcome!
    - interactive graphics (e.g., linking and brushing and zooming)?
      + select points on a plot and have the linear regression line
        ONLY for the selected points (?)
    - Explore ways to do the d3 linked scatterplot matrix?
      See examples/brushing/d3/
      - NOTE: to run, you can start an HTTP server to serve the files in
            that directory by ...
            python -m SimpleHTTPServer
            ... then you get something like ...
            Serving HTTP on 0.0.0.0 port 8000 ...
            ... so you open a browser and point it at ...
            http://0.0.0.0:8000/iris-splom.html
      - is it possible to orthogonalise the description of linkages
        in a similar way to which animaker orthogonalised the 
        dscription of timing information for animations ??
    - Adding *transitions* to existing manipulation tools
      e.g., change order of bars in barplot, BUT bars
      transition from one position to another rather than
      instantly reappear;  may require callback to R just to get
      new positions for transition
    - Linked scatterplot and analysis (regression) with ability
      to identify outliers via brushing;  callback to R to 
      update regression line and output with outliers removed

  + Embellishing sampling-variation
    - choose your own data set
    - choose your own statistic
    - granularity of sampling

    - as well as "start", allow "pause", or even "rewind"
      (or even a slider!)


DONE:

  + If someone has already garnished a grob with an 'id' attribute 
    we should LEAVE IT ALONE

  + bump gridSVG version to 1.1-0 on the github repo
    (and get the NEWS file sorted out for that change)

    (bump again to 1.2-0 after merge R-forge R2.16 branch
     AND make sure that this has 'depends:  R (>= 3.0)')

    fillPattern and filter stuff goes in 1.2-0 (?)

  + 'gridSVG':  
    Export R class() of objects as SVG element 'class' attribute ?
    - as part of version 1.2-0

  + Clipping paths
    - separate table of clipping paths as per fill patterns
    - grid.clipPath() function ?  that refers to path in clipping path table
    - DOCUMENT differences between grid and gridSVG semantics

  + Implement masks, filter effects, gradients, ...


2013-04-16
----------

NOTE:

  + feComposite filter effect allows Porter Duff compositing operators

  + example of usefulness of programmatic control of SVG features:
    - batch run through all R pch symbols to generate set of 
      (nasty) glowing 3D button pch symbols (using single filter
      like http://www.w3.org/TR/SVG/filters.html#AnExample).


DISCUSS:

  + We have clearance (from the Chambers Award judges) to move back
    to R-Forge (from github)

  + The perils of implementing pushMask() as "viewport" sub-class
    are evident in the number of "viewport" methods within 'grid'.

    grep '[.]viewport' Files/Research/Rstuff/r-devel/trunk/src/library/grid/R/*.R

  + Check list from last time


TODO:

  + If someone has already garnished a grob with an 'id' attribute 
    we should LEAVE IT ALONE

  + Add to gridSVG id generation tech report the fact that there is
    now a 'prefix' argument for ids

  + bump gridSVG version to 1.1-0 on the github repo
    (and get the NEWS file sorted out for that change)

    (bump again to 1.2-0 after merge R-forge R2.16 branch
     AND make sure that this has 'depends:  R (>= 3.0)')

    fillPattern and filter stuff goes in 1.2-0 (?)

  + push version 1.1-0 to CRAN 
    (WITH 'depends:  R (< 3.0)')
    - waiting for fix to 'XML' bug

  + merge github version back to R-Forge

  + push version 1.2-0 to CRAN 

  + 'gridSVG':  
    Export R class() of objects as SVG element 'class' attribute ?
    - as part of version 1.1-0 (?)

  + Tech Reports: (?)
    - a discussion of how to select SVG elements produced by 'gridSVG'
      + by id (refer to separate doc)
      + by class (?)
      + by SVG element
      + by structure (nesting)
    - knitr hook for gridSVG
    - new SVG features in gridSVG
      + including fill patterns, filters, path clipping, elementGrob(), ...
    
  + create grobToSVG() function ?
    - x = a grob or gTree
    - width + height give you where to draw
    - gridToSVG() would call this (?)

  + Clipping paths
    - separate table of clipping paths as per fill patterns
    - grid.clipPath() function ?  that refers to path in clipping path table
    - DOCUMENT differences between grid and gridSVG semantics

  + Some ideas ...
    - scale up sampling variation to longer animation;  does it scale?
    - can you provide a simpler interface for describing the
      animation actions?
    - can you abstract out another step in the animation description?
      e.g., WHAT you are animating from HOW you are animating it

  + Ideas for another dynamically updating web graphic welcome!
    - interactive graphics (e.g., linking and brushing and zooming)?
      + select points on a plot and have the linear regression line
        ONLY for the selected points (?)
    - Explore ways to do the d3 linked scatterplot matrix?
      See examples/brushing/d3/
      - NOTE: to run, you can start an HTTP server to serve the files in
            that directory by ...
            python -m SimpleHTTPServer
            ... then you get something like ...
            Serving HTTP on 0.0.0.0 port 8000 ...
            ... so you open a browser and point it at ...
            http://0.0.0.0:8000/iris-splom.html
      - is it possible to orthogonalise the description of linkages
        in a similar way to which animaker orthogonalised the 
        dscription of timing information for animations ??
    - Adding *transitions* to existing manipulation tools
      e.g., change order of bars in barplot, BUT bars
      transition from one position to another rather than
      instantly reappear;  may require callback to R just to get
      new positions for transition
    - Linked scatterplot and analysis (regression) with ability
      to identify outliers via brushing;  callback to R to 
      update regression line and output with outliers removed

  + Embellishing sampling-variation
    - choose your own data set
    - choose your own statistic
    - granularity of sampling

    - as well as "start", allow "pause", or even "rewind"
      (or even a slider!)


DONE: 

  + FIX UP   generating-unique-names.Rhtml

  + READ http://www.stat.auckland.ac.nz/~paul/Reports/labels/labels.html
    (and send comments to Paul)

  + push version 1.0-0 to CRAN

  + Tech reports:
    - a discussion of how significant it is that 'gridSVG' documents
      are VERY structured and WELL-LABELLED 

  + Clipping paths
    - Does grid.clip() currently export ?
    - Can it ?

  + Other SVG features to look at:
     + filters
     + clipping paths
     + masks

  + create gridsvg() function/device so can do

    gridsvg()
    # draw
    dev.off

    - Simon noticed that this would only make sense if you are generating
      an SVG file (NOT generating SVG in memory)
    - While we're at it, a better name than gridToSVG() would be nice
      gridExport() ??

  + Add 'lex' support to 'gridSVG' 


FOR NOTING:

  + Simple "interactive" data viz using R (to generate heaps of static plots)
    and then javascript to switch between them.

    http://www.rodrigozamith.com/2013/03/27/going-under-the-hood-of-the-ncaa-tournament-visualization/


2013-04-09
----------

DISCUSS:

  + Clipping paths:
    - problem is that can only use basic shapes to define a clipping path
      (e.g., no <g> elements)
    - possible solution:  restrict definition of clipping path to only
      simple grobs (rects, circles, ...)
      + problems with this solution:
        - have to write special export to SVG code?
        - unnecessarily limiting
    - possible solution:  write a "flattener" that takes normal gridSVG
      output and strips out everything that is not allowed.
      + problems with this solution:
        - have to incorporate top-level transform into <clipPath> (doable)
        - have to incorporate transforms in <g> elements around <text> 
          into <text> itself (doable)
        - CANNOT export math annotation (implemented as <foreignObject>)
        - May not be able to use clipping in clip path drawing (?)
        - Might be a real hassle to handle rotated viewports (when they come)
        - May have to incorporate other attributes from parent <g> to
          child element that is being kept (doable?)

  + Nancy needs project title

  + What should 'gridSVG' do if someone has already garnished a
    grob with an 'id' attribute ???

  + DUE DATE for submission of thesis is *** May 1 ***

    Submission = "Two hardbound copies of your thesis must be submitted to 
                  the Graduate Centre by the due date"

    Masters Handbook:
    http://www.auckland.ac.nz/webdav/site/central/shared/for/current-students/postgraduate-students/documents/publications/masters-handbook.pdf

    Guide to Theses and Dissertations:
    http://www.auckland.ac.nz/webdav/site/central/shared/for/current-students/postgraduate-students/documents/policies-guidelines-forms/guide-to-theses-and-dissertations.pdf

    PLAN:
    + Aim for June 7 (end of Sem 1 lectures)
    + Get extension from Chris T (BEFORE May 1)
      - Fill in form AS-503
    + Do seminar (rather than graduate project talk)

  + What next for Simon Potter ?
    - Paul can talk to RStudio or Robert Gentleman 

  + Are we agreed that ...
    - SVG does NOT support making the clipping region larger
      http://www.w3.org/TR/SVG/masking.html#EstablishingANewClippingPath
    - This means that we CANNOT support 'grid' behaviour that makes
      the clip region larger, e.g., ...

      pushViewport(viewport(width=.5, clip="on"))
      pushViewport(viewport(clip="off"))

    - BUT we CAN still reproduce 'grid' behaviour for ...
      
      pushViewport()
      grid.clip()
      pushViewport()

      ... so we WILL support that.
    - We need to document this somewhere
    - NOTE:  should we just NOT have a 'clip-path' when clip="off" ?

  + How to incorporate Paul's changes to R-forge gridSVG
    - primToDev.gTree() now draws children in 'childrenOrder' (!)
    - Added (partial) support for rotated viewports 
      (See Research/Rstuff/SVG/gridsvg/)
      + Still needs "rastergrob" support (order of transformations tricky)
      + Animation code will need changing (because animating x/y/width/height
        will all affect the origin of rotation);  also support animating
        rotation angle??  

    PLAN:
      + WAIT until github (post 3.0) repo has been ported back to R-Forge
        then update my SVN repo and deal with the conflicts

  + Allow prefix on all SVG 'id's produced by gridToSVG()
    (so that can embed SVG in HTML, say, and still avoid name collisions)

  + Add 'lex' support to 'gridSVG' ?

  + Another deviation from 'grid':
    text justification clamped to the 0 to 1 range.
    (as mentioned in "NEWS.Rd" file)

  + Another diviation:
    rotated viewports
    (Paul has begun work, but it looks nasty)

  + Uses for gradient fills:
    - ggplot2 scale_color legend
    - opens up the possibility of representing numeric data as
      gradient fills (ever been done before?);  i.e., mind-expanding
    - pin-cushion effect for voronoi diagrams as per
      http://graphics.uni-konstanz.de/publikationen/2005/voronoi_treemaps/Balzer%20et%20al.%20--%20Voronoi%20Treemaps.pdf


DONE:

  + work on ...
    - gradient fills
    - masks
    - clipping paths
    - filters


FOR NOTING:

  + The 'vega' project 
    https://github.com/trifacta/vega/wiki/Documentation

  + The 'DexCharts' project
    https://github.com/PatMartin/DexCharts

  + The RIGHT project "R-Interactive-Graphics-via-HTml"
    (proposed for GSoC 2013)

    https://code.google.com/p/r-interactive-graphics-via-html

  + The 'clickme' package
    https://github.com/nachocab/clickme

  + Dex:  The Data Explorer
    http://dexvis.com/doku.php

  + NVD3 
    Chart library on top of D3
    http://nvd3.org/

  + Parallel coordinate plot implementation on top of D3
    http://syntagmatic.github.com/parallel-coordinates/


2013-03-19
----------

IDEA:

  + Good area to look in for applications of exotic SVG features
    is MAPS (filling or clipping to arbitrary shapes)


DISCUSS:

  + Draft article on "Generating Structured and Labelled SVG"
    http://www.stat.auckland.ac.nz/~paul/Reports/labels/labels.html

  + Fill pattern motivating example 
    R-help 2013-03-22 from Etienne Low-Decarie

  + Possible example of fancy annotation to justify some of the
    more exotic SVG features:

    R-help 2013-03-14 from Ohagen Patrik 
    in NetscapeMail/Teaching/Simon2012/

  + A possible gradient-fill example
    R-help 2013-02-13 from Elisabeth wever
    in NetscapeMail/Teaching/Simon2012/

  + Need to document somewhere KNOWN 'grid' features that
    CANNOT be replicated by gridSVG
    - e.g., pushViewport(viewport(clip="on"),
                         viewport(clip="off"))
    - a .org file at top level of thesis-notes/ ?

  + Submit a gridSVG_1.0-something to CRAN as last pre-3.0 
    version ?
    See "preparing for R 3.0.0" email
    in NetscapeMail/Teaching/Simon2012/

    Start new gridSVG3 on R-forge ?

  + Possible idea for "useful" filter effect:
    The "engraved metallic" raster treatment

  + Addition to 'gridSVG':  
    - write a normal R graphics device interface so that the user
      can do something like ...
      
      gridsvg()
      # grid or lattice or ggplot drawing
      dev.off()

      Would require some C code to satisfy the generic R device
      API, but most of it would be empty.  The device would open        
      a pdf(file=NULL) device to record all of the drawing 
      and then all of the (export) action would happen at dev.off()


TODO:

  + FIX UP   generating-unique-names.Rhtml

  + READ http://www.stat.auckland.ac.nz/~paul/Reports/labels/labels.html
    (and send comments to Paul)

  + bump gridSVG version to 1.1-0 on the github repo
    (and get the NEWS file sorted out for that change)

    (bump again to 1.2-0 after merge R-forge R2.16 branch
     AND make sure that this has 'depends:  R (>= 3.0)')

    fillPattern and filter stuff goes in 1.2-0 (?)

  + push version 1.0-0 to CRAN

  + push version 1.1-0 to CRAN 
    (WITH 'depends:  R (< 3.0)')

  + merge github version back to R-Forge

  + push version 1.2-0 to CRAN 

  + 'gridSVG':  
    Export R class() of objects as SVG element 'class' attribute ?
    - as part of version 1.1-0 (?)

  + Tech Reports: (?)
    - a discussion of how to select SVG elements produced by 'gridSVG'
      + by id (refer to separate doc)
      + by class (?)
      + by SVG element
      + by structure (nesting)
    - a discussion of how significant it is that 'gridSVG' documents
      are VERY structured and WELL-LABELLED 
    - knitr hook for gridSVG
    - new SVG features in gridSVG
      + including fill patterns, filters, path clipping, elementGrob(), ...
    
  + create grobToSVG() function ?
    - x = a grob or gTree
    - width + height give you where to draw
    - gridToSVG() would call this (?)

  + Clipping paths
    - Does grid.clip() currently export ?
    - Can it ?
    - separate table of clipping paths as per fill patterns
    - grid.clipPath() function ?  that refers to path in clipping path table
    - DOCUMENT differences between grid and gridSVG semantics

  + Other SVG features to look at:
     + filters
     + clipping paths
     + masks

  + create gridsvg() function/device so can do

    gridsvg()
    # draw
    dev.off

    - Simon noticed that this would only make sense if you are generating
      an SVG file (NOT generating SVG in memory)
    - While we're at it, a better name than gridToSVG() would be nice
      gridExport() ??

  + Some ideas ...
    - scale up sampling variation to longer animation;  does it scale?
    - can you provide a simpler interface for describing the
      animation actions?
    - can you abstract out another step in the animation description?
      e.g., WHAT you are animating from HOW you are animating it

  + Ideas for another dynamically updating web graphic welcome!
    - interactive graphics (e.g., linking and brushing and zooming)?
      + select points on a plot and have the linear regression line
        ONLY for the selected points (?)
    - Explore ways to do the d3 linked scatterplot matrix?
      See examples/brushing/d3/
      - NOTE: to run, you can start an HTTP server to serve the files in
            that directory by ...
            python -m SimpleHTTPServer
            ... then you get something like ...
            Serving HTTP on 0.0.0.0 port 8000 ...
            ... so you open a browser and point it at ...
            http://0.0.0.0:8000/iris-splom.html
      - is it possible to orthogonalise the description of linkages
        in a similar way to which animaker orthogonalised the 
        dscription of timing information for animations ??
    - Adding *transitions* to existing manipulation tools
      e.g., change order of bars in barplot, BUT bars
      transition from one position to another rather than
      instantly reappear;  may require callback to R just to get
      new positions for transition
    - Linked scatterplot and analysis (regression) with ability
      to identify outliers via brushing;  callback to R to 
      update regression line and output with outliers removed

  + Embellishing sampling-variation
    - choose your own data set
    - choose your own statistic
    - granularity of sampling

    - as well as "start", allow "pause", or even "rewind"
      (or even a slider!)


DONE:

  + Tech reports
    - a discussion of gridSVG 'id' generation (from grob and viewport names)

  + Fill patterns (take II)
    - separate table of fill pattern information
      fillPattern(label, ...) function
    - grid.fill(grob, patternid) -> "filled.grob" object
    - export fill pattern table at start of SVG export to <pattern> elements
      (use "usage table" to ensure unique ids as for grobs and vps)
    - export of "filled.grob" resolves reference to <pattern> element
    
  + Still have elementGrob() for low-level expert use
    - create elementGrob() ?
      + documentation:  'asis' should say ...
        "asis: If ‘TRUE’, SVG id attributes will be generated from 
         the 'name' with no modification so that we
         can easily refer to the generated elements.
         Otherwise, normal name mangling occurs (see gridToSVG())."


2013-03-26
----------

Servers down so just looked at git-gridsvg online


TODO list rolls over to next time


DONE:

  + Fill patterns (take II)
    ... ongoing ...


PAUL DONE:

  + Read 
    - naming-scheme-usage.org
    - articles/generating-unique-names/


2013-03-04
----------

PAUL TODO:

  + Read 
    - naming-scheme-usage.org
    - articles/generating-unique-names/
    

TODO:

  + Tech Reports: (?)
    - a discussion of gridSVG 'id' generation (from grob and viewport names)
    - a discussion of how to select SVG elements produced by 'gridSVG'
      + by id (refer to separate doc)
      + by class (?)
      + by SVG element
      + by structure (nesting)
    - a discussion of how significant it is that 'gridSVG' documents
      are VERY structured and WELL-LABELLED 
    - knitr hook for gridSVG
    - new SVG features in gridSVG
      + including elementGrob()
    
  + create grobToSVG() function ?
    - x = a grob or gTree
    - width + height give you where to draw
    - gridToSVG() would call this (?)

  + Fill patterns (take II)
    - separate table of fill pattern information
      fillPattern(label, ...) function
    - grid.fill(grob, patternid) -> "filled.grob" object
    - export fill pattern table at start of SVG export to <pattern> elements
      (use "usage table" to ensure unique ids as for grobs and vps)
    - export of "filled.grob" resolves reference to <pattern> element
    
  + Still have elementGrob() for low-level expert use
    - create elementGrob() ?
      + documentation:  'asis' should say ...
        "asis: If ‘TRUE’, SVG id attributes will be generated from 
         the 'name' with no modification so that we
         can easily refer to the generated elements.
         Otherwise, normal name mangling occurs (see gridToSVG())."

  + Clipping paths
    - Does grid.clip() currently export ?
    - Can it ?
    - separate table of clipping paths as per fill patterns
    - grid.clipPath() function ?  that refers to path in clipping path table

  + Other SVG features to look at:
     + filters
     + clipping paths
     + masks

  + 'gridSVG':  
    Export R class() of objects as SVG element 'class' attribute ?

  + Some ideas ...
    - scale up sampling variation to longer animation;  does it scale?
    - can you provide a simpler interface for describing the
      animation actions?
    - can you abstract out another step in the animation description?
      e.g., WHAT you are animating from HOW you are animating it

  + Ideas for another dynamically updating web graphic welcome!
    - interactive graphics (e.g., linking and brushing and zooming)?
      + select points on a plot and have the linear regression line
        ONLY for the selected points (?)
    - Explore ways to do the d3 linked scatterplot matrix?
      See examples/brushing/d3/
      - NOTE: to run, you can start an HTTP server to serve the files in
            that directory by ...
            python -m SimpleHTTPServer
            ... then you get something like ...
            Serving HTTP on 0.0.0.0 port 8000 ...
            ... so you open a browser and point it at ...
            http://0.0.0.0:8000/iris-splom.html
      - is it possible to orthogonalise the description of linkages
        in a similar way to which animaker orthogonalised the 
        dscription of timing information for animations ??
    - Adding *transitions* to existing manipulation tools
      e.g., change order of bars in barplot, BUT bars
      transition from one position to another rather than
      instantly reappear;  may require callback to R just to get
      new positions for transition
    - Linked scatterplot and analysis (regression) with ability
      to identify outliers via brushing;  callback to R to 
      update regression line and output with outliers removed

  + Embellishing sampling-variation
    - choose your own data set
    - choose your own statistic
    - granularity of sampling

    - as well as "start", allow "pause", or even "rewind"
      (or even a slider!)


DONE:

  + Check out javascript libraries to see if any are automatically 
    imposing structure and labelling on SVG output (D3, highcharts, etc)
    - there are also potentially other non-javascript tools that
      generate SVG (plot2svg [matlab])
    See naming-scheme-usage.org

  + Tech Reports: (?)
    - a discussion of gridSVG 'id' generation (from grob and viewport names)
    See articles/generating-unique-names/

  + gridSVG id generation
    - documentation:
      + In 'usePaths', change ...
        "gridSVG will set the name to the current ‘vpPath’
         instead of the current viewport"
        ... to ...
        "gridSVG will set the SVG element id to the current ‘vpPath’
         instead of the current viewport name."
       + Ditto for grobs
       + In 'uniqueNames' (or Details), mention how this is different
         from 'usePaths' (grobs with same name at top level OR
         grob and viewport with same name)
      See git-gridsvg/
    - document the problem that ...
        push(viewport(name="a"))
        up()
        down("a")
      ... is indistuishable (in terms of SVG 'id's) from ...
        push(viewport(width=.5, name="a"))
        up()
        down("a")
      ... i.e., DIFFERENT viewport, SAME name
      See articles/generating-unique-names/
    - getSVGMappings():  add another mapping column with just original vp/grob
      names (no paths) so can query on original name (don't have to 
      give path)
      See git-gridsvg/

FOR NOTING:

  + Slightly old, but still useful list of javascript plotting libraries

    http://webdesignledger.com/resources/13-useful-javascript-solutions-for-charts-and-graphs


2013-02-26/27/28
----------

TODO:

  + Check out javascript libraries to see if any are automatically 
    imposing structure and labelling on SVG output (D3, highcharts, etc)
    - there are also potentially other non-javascript tools that
      generate SVG (plot2svg [matlab])

  + Tech Reports: (?)
    - a discussion of gridSVG 'id' generation (from grob and viewport names)
    - a discussion of how to select SVG elements produced by 'gridSVG'
      + by id (refer to separate doc)
      + by class (?)
      + by SVG element
      + by structure (nesting)
    - a discussion of how significant it is that 'gridSVG' documents
      are VERY structured and WELL-LABELLED 
    - knitr hook for gridSVG
    - new elementGrob in gridSVG
    
  + create grobToSVG() function ?
    - x = a grob or gTree
    - width + height give you where to draw
    - gridToSVG() would call this (?)

  + gridSVG id generation
    - documentation:
      + In 'usePaths', change ...
        "gridSVG will set the name to the current ‘vpPath’
         instead of the current viewport"
        ... to ...
        "gridSVG will set the SVG element id to the current ‘vpPath’
         instead of the current viewport name."
       + Ditto for grobs
       + In 'uniqueNames' (or Details), mention how this is different
         from 'usePaths' (grobs with same name at top level OR
         grob and viewport with same name)
    - document the problem that ...
        push(viewport(name="a"))
        up()
        down("a")
      ... is indistuishable (in terms of SVG 'id's) from ...
        push(viewport(width=.5, name="a"))
        up()
        down("a")
      ... i.e., DIFFERENT viewport, SAME name
    - getSVGMappings():  add another mapping column with just original vp/grob
      names (no paths) so can query on original name (don't have to 
      give path)

  + Fill patterns:  WTF ?   How ???  (ids that you can rely on)
    - create elementGrob() ?
      + documentation:  'asis' should say ...
        "asis: If ‘TRUE’, SVG id attributes will be generated from 
         the 'name' with no modification so that we
         can easily refer to the generated elements.
         Otherwise, normal name mangling occurs (see gridToSVG())."
   - also use this for ... ?
     + filters
     + clipping paths
     + masks

  + 'gridSVG':  
    Export R class() of objects as SVG element 'class' attribute ?

  + Some ideas ...
    - scale up sampling variation to longer animation;  does it scale?
    - can you provide a simpler interface for describing the
      animation actions?
    - can you abstract out another step in the animation description?
      e.g., WHAT you are animating from HOW you are animating it

  + Ideas for another dynamically updating web graphic welcome!
    - interactive graphics (e.g., linking and brushing and zooming)?
      + select points on a plot and have the linear regression line
        ONLY for the selected points (?)
    - Explore ways to do the d3 linked scatterplot matrix?
      See examples/brushing/d3/
      - NOTE: to run, you can start an HTTP server to serve the files in
            that directory by ...
            python -m SimpleHTTPServer
            ... then you get something like ...
            Serving HTTP on 0.0.0.0 port 8000 ...
            ... so you open a browser and point it at ...
            http://0.0.0.0:8000/iris-splom.html
      - is it possible to orthogonalise the description of linkages
        in a similar way to which animaker orthogonalised the 
        dscription of timing information for animations ??
    - Adding *transitions* to existing manipulation tools
      e.g., change order of bars in barplot, BUT bars
      transition from one position to another rather than
      instantly reappear;  may require callback to R just to get
      new positions for transition
    - Linked scatterplot and analysis (regression) with ability
      to identify outliers via brushing;  callback to R to 
      update regression line and output with outliers removed

  + Embellishing sampling-variation
    - choose your own data set
    - choose your own statistic
    - granularity of sampling

    - as well as "start", allow "pause", or even "rewind"
      (or even a slider!)


FUTURE PLANNING:
      
  + When R 3.0 comes out, can merge SOME of the R2.16 branch of 'gridSVG'
    to simplify code for things in 'grid' like xaxis grobs
    BUT do NOT merge the changes that rely on the fork of 'gtable' 
    (at least not until that fork is merged into the master 'gtable')
    SO keep the custom code in 'gridSVG' that mirrors 'gtable' drawing 
  + Also wait for R 3.0 to merge the github 'gridSVG' because
    that changes LOTS of grob-name-to-id mappings
    (which will break lots of people's examples)
  + Move to 'gridSVG3' package with R 3.0 ??
    So that old examples still work with 'gridSVG' and new development
    can work with gridSVG3 ???


CSS selectors:

  + If gridSVG generates ids with dots, it gets messy writing
    CSS selectors to target those ids (because a dot is treated
    as a class separator)
  + Do NOT worry about this in terms of *generating* ids because
    can provide support in places like getSVGMappings() and provide
    auto escape feature there (?)


DONE:

  + gridSVG id generation
    SEE new arguments in gridToSVG(), plus new javascript functions
        getSVGmappings() [?]
        NOTE these features are not yet on R-forge because of problems
        with ggplot2 (gtable)
    - PROBLEMS:
      + need to include gPaths (like vpPaths) because can have
        grobs with same name (as long as they have different
        parents OR are at the top level)
      + need to keep track of whether we are generating id for
        grob or viewport because grobs and viewports can have the
        same name!
    - SOLUTION (?)
      + add grob id transforms to the viewport id transform data frame
        BUT add a column that indicates whether transform is for 
        grob or viewport
      + on export, split data frame into TWO tables (one for grobs
        and one for viewports)
      + in javascript, have TWO mapping functions, one from gPath to    
        id and one from vpPath to id;  the return value is a base id
        PLUS one or more numeric suffixes (NOT necessarily contiguous)
        (OR just all matching ids ?)
    - NOTE this has to wait until April (when R 3.0 comes out and
      new grid makeContent() methods can be incorporated into gridSVG
      [so that naming for ggplot2 (gtable) grobs becomes sane])


2013-02-19
----------

DISCUSS:

  + Remind Paul why we don't like RServe and FastRWeb
    - someone also mentioned "Flask" and 'pyServe' (?)
    - See "Passing R code from webpage" from Simon Urbanek 2013-02-19
      (in NetscapeMail/Teaching/Simon2012/)
    - The answer is that RServe requires MUCH more set up than Rook


TODO:

  + Some ideas ...
    - scale up sampling variation to longer animation;  does it scale?
    - can you provide a simpler interface for describing the
      animation actions?
    - can you abstract out another step in the animation description?
      e.g., WHAT you are animating from HOW you are animating it

  + Ideas for another dynamically updating web graphic welcome!
    - interactive graphics (e.g., linking and brushing and zooming)?
      + select points on a plot and have the linear regression line
        ONLY for the selected points (?)
    - Explore ways to do the d3 linked scatterplot matrix?
      See examples/brushing/d3/
      - NOTE: to run, you can start an HTTP server to serve the files in
            that directory by ...
            python -m SimpleHTTPServer
            ... then you get something like ...
            Serving HTTP on 0.0.0.0 port 8000 ...
            ... so you open a browser and point it at ...
            http://0.0.0.0:8000/iris-splom.html
      - is it possible to orthogonalise the description of linkages
        in a similar way to which animaker orthogonalised the 
        dscription of timing information for animations ??
    - Adding *transitions* to existing manipulation tools
      e.g., change order of bars in barplot, BUT bars
      transition from one position to another rather than
      instantly reappear;  may require callback to R just to get
      new positions for transition
    - Linked scatterplot and analysis (regression) with ability
      to identify outliers via brushing;  callback to R to 
      update regression line and output with outliers removed

  + Embellishing sampling-variation
    - choose your own data set
    - choose your own statistic
    - granularity of sampling

    - as well as "start", allow "pause", or even "rewind"
      (or even a slider!)

  + gridSVG id generation
    - PROBLEMS:
      + need to include gPaths (like vpPaths) because can have
        grobs with same name (as long as they have different
        parents OR are at the top level)
      + need to keep track of whether we are generating id for
        grob or viewport because grobs and viewports can have the
        same name!
    - SOLUTION (?)
      + add grob id transforms to the viewport id transform data frame
        BUT add a column that indicates whether transform is for 
        grob or viewport
      + on export, split data frame into TWO tables (one for grobs
        and one for viewports)
      + in javascript, have TWO mapping functions, one from gPath to    
        id and one from vpPath to id;  the return value is a base id
        PLUS one or more numeric suffixes (NOT necessarily contiguous)
        (OR just all matching ids ?)
    - NOTE this has to wait until April (when R 3.0 comes out and
      new grid makeContent() methods can be incorporated into gridSVG
      [so that naming for ggplot2 (gtable) grobs becomes sane])


DONE:

  + Chambers Award 

  + Add general option flag in 'gridSVG' that says whether to
    "make safe" id values (e.g., all "." and ":" in ids are
    auto translated to "-" OR maybe "--" to avoid conflict
    with existing ids!?)
    NOTE that (because we now produce XML) it is possible to
    post-process id values AFTER generating the entire document
    (so you can check for conflicts [among other things like uniqueness!])
    BUT ideally want the result to be predictable
    
    - might generally be useful for gridSVG() to produce a mapping
      of original grob names to final SVG ids (as part of the list
      that gridToSVG() returns [plus maybe as JSON])
      That would allow, e.g., in javascript code using an original
      grob name and converting it to an SVG id on-the-fly

    - also check whether gTree child grobs get an id with full gPath
      (they should! because otherwise they are not guaranteed unique)

    - Simon has patches for this BUT also see "id generation" above
      (needs to wait until April to commit these patches)

  + another example 
    See examples/mixture-models


2013-02-12
----------

DISCUSS:

  + Chambers Award 
    - Simon's application
    - Paul's letter of support
      + Have I mentioned everything that Simon has mentioned ?


TODO:

  + Finalise Chambers Award application
    - "All application materials must be received by 5:00pm EST, Monday,
       February 18, 2013"
    - comments on Paul's letter
    - Simon's summary:
      para 1 REPLACE:
      + D3 is shit hot for reactive web graphics
      + R is ok for stat graphics (static)
      + These packages bridge the gap between R + D3 to produce
        reactive statistical web graphics 

      "With Shiny (et al) it is possible to interact with the web page
       and have the web page contents change, but it is not possible
       to interact with the graphic and have the graphic contents change."

      NOT "usable solution" but "complete solution"
    - Document giving links to software and tech reports and examples
    - Polish examples
    - develop an example that shows ALL of gridSVG developments +
      animaker + TimingManager + selectr + D3
    - build Windows binary for 'animaker' ?

  + Add general option flag in 'gridSVG' that says whether to
    "make safe" id values (e.g., all "." and ":" in ids are
    auto translated to "-" OR maybe "--" to avoid conflict
    with existing ids!?)
    NOTE that (because we now produce XML) it is possible to
    post-process id values AFTER generating the entire document
    (so you can check for conflicts [among other things like uniqueness!])
    BUT ideally want the result to be predictable
    
    - might generally be useful for gridSVG() to produce a mapping
      of original grob names to final SVG ids (as part of the list
      that gridToSVG() returns [plus maybe as JSON])
      That would allow, e.g., in javascript code using an original
      grob name and converting it to an SVG id on-the-fly

    - also check whether gTree child grobs get an id with full gPath
      (they should! because otherwise they are not guaranteed unique)

  + Some ideas ...
    - scale up sampling variation to longer animation;  does it scale?
    - can you provide a simpler interface for describing the
      animation actions?
    - can you abstract out another step in the animation description?
      e.g., WHAT you are animating from HOW you are animating it

  + Ideas for another dynamically updating web graphic welcome!
    - interactive graphics (e.g., linking and brushing and zooming)?
      + select points on a plot and have the linear regression line
        ONLY for the selected points (?)
    - Explore ways to do the d3 linked scatterplot matrix?
      See examples/brushing/d3/
      - NOTE: to run, you can start an HTTP server to serve the files in
            that directory by ...
            python -m SimpleHTTPServer
            ... then you get something like ...
            Serving HTTP on 0.0.0.0 port 8000 ...
            ... so you open a browser and point it at ...
            http://0.0.0.0:8000/iris-splom.html
      - is it possible to orthogonalise the description of linkages
        in a similar way to which animaker orthogonalised the 
        dscription of timing information for animations ??
    - Adding *transitions* to existing manipulation tools
      e.g., change order of bars in barplot, BUT bars
      transition from one position to another rather than
      instantly reappear;  may require callback to R just to get
      new positions for transition
    - Linked scatterplot and analysis (regression) with ability
      to identify outliers via brushing;  callback to R to 
      update regression line and output with outliers removed

  + Embellishing sampling-variation
    - choose your own data set
    - choose your own statistic
    - granularity of sampling

    - as well as "start", allow "pause", or even "rewind"
      (or even a slider!)


DONE:

  + MDS scaling example
    See examples/mds/
    - reimplementation of http://bl.ocks.org/4482115
    - useful comparison of doing everything in D3 versus       
      trying to do some in R (then just interaction in D3)

  + hexbin example
    See examples/hexbin/
    - useful to use R to generate hexbin (until D3 got its own hexbin)
    - another example of putting all the pieces together
    - would benefit from 'hexbin' naming its grobs and viewports properly!
    - plan was to provide scatterplot alternative (overplotted and transparent)
      BUT that was TOO SLOW 

  + Finalise Chambers Award application
    - "All application materials must be received by 5:00pm EST, Monday,
       February 18, 2013"


FOR NOTING:

  + A "silly" D3 + R example

    http://bl.ocks.org/4731053

    Interesting because it provides an example where D3 
    is being used to draw the plot.

  + More R + D3

    http://rud.is/b/2013/02/08/extended-simple-example-asn-graph-visualization-example-r-to-d3/

    Networks (graphs) this time;  interesting one to look into?
    See 'gridGraphviz' integration with 'gridSVG' then D3 to make
    animation/interaction ???


PAUL DONE:

  + Read sampvar-reflections.org 
    - nice summary of pros and cons (this will be VERY useful when
      it comes time to write your thesis discussion)

  + Read shiny-smoother.org 
    - can confirm that the 'shiny' implementation of this example is NOT
      straightforward.  At least as complicated as the 'Rook' version and
      I think the Rook version would be simpler now anyway because we have
      better tools for handling the 'grid' coordinate systems (?)

  + Simon's Chamber's Award application
    - write a letter of support
      See ../ChambersAward/JMCsupport.doc
    - read Simon's summary for application
    - check what else is required for application
      + Simon's CV
      + letter of support from me
      + brief description of software
      + the software itself (with enough info to install it)
        - can include links to tech reports
        - include the BSc Honours report too

FOR PAUL:

  + Guidelines for the Appointment of Examiners of Doctoral Theses and Masters Research Theses/Portfolios
    http://www.auckland.ac.nz/webdav/site/central/shared/for/current-students/postgraduate-students/documents/policies-guidelines-forms/guidelines-for-the-appointment-of-examiners.pdf
    Copy in ../


2013-02-05
----------

FOR NOTING:

  + Shiny Server now available

    http://blog.rstudio.org/2013/01/22/shiny-server-now-available/

  + voxel.js javascript 3D (voxel) game engine for browsers

    Possible basis for interactive 3D visualisations ?

    http://voxeljs.com/

  + Another Shiny + D3 example  (interactive MDS [Multi-dimensional Scaling])

    http://bl.ocks.org/4482115


TODO:

  + Finalise Chambers Award application
    - "All application materials must be received by 5:00pm EST, Monday,
       February 18, 2013"
    - Remember to give links to relevant Tech Reports
    - develop an example that shows ALL of gridSVG developments +
      animaker + TimingManager + selectr + D3
    - build Windows binary for 'animaker' ?

  + Add general option flag in 'gridSVG' that says whether to
    "make safe" id values (e.g., all "." and ":" in ids are
    auto translated to "-" OR maybe "--" to avoid conflict
    with existing ids!?)
    NOTE that (because we now produce XML) it is possible to
    post-process id values AFTER generating the entire document
    (so you can check for conflicts [among other things like uniqueness!])
    BUT ideally want the result to be predictable
    
    - might generally be useful for gridSVG() to produce a mapping
      of original grob names to final SVG ids (as part of the list
      that gridToSVG() returns [plus maybe as JSON])
      That would allow, e.g., in javascript code using an original
      grob name and converting it to an SVG id on-the-fly

    - also check whether gTree child grobs get an id with full gPath
      (they should! because otherwise they are not guaranteed unique)

  + Some ideas ...
    - scale up sampling variation to longer animation;  does it scale?
    - can you provide a simpler interface for describing the
      animation actions?
    - can you abstract out another step in the animation description?
      e.g., WHAT you are animating from HOW you are animating it

  + Ideas for another dynamically updating web graphic welcome!
    - interactive graphics (e.g., linking and brushing and zooming)?
      + select points on a plot and have the linear regression line
        ONLY for the selected points (?)
    - Explore ways to do the d3 linked scatterplot matrix?
      See examples/brushing/d3/
      - NOTE: to run, you can start an HTTP server to serve the files in
            that directory by ...
            python -m SimpleHTTPServer
            ... then you get something like ...
            Serving HTTP on 0.0.0.0 port 8000 ...
            ... so you open a browser and point it at ...
            http://0.0.0.0:8000/iris-splom.html
      - is it possible to orthogonalise the description of linkages
        in a similar way to which animaker orthogonalised the 
        dscription of timing information for animations ??
    - Adding *transitions* to existing manipulation tools
      e.g., change order of bars in barplot, BUT bars
      transition from one position to another rather than
      instantly reappear;  may require callback to R just to get
      new positions for transition
    - Linked scatterplot and analysis (regression) with ability
      to identify outliers via brushing;  callback to R to 
      update regression line and output with outliers removed

  + Embellishing sampling-variation
    - choose your own data set
    - choose your own statistic
    - granularity of sampling

    - as well as "start", allow "pause", or even "rewind"
      (or even a slider!)


DONE:

  + Do a 'shiny' version of sampling variation
    See examples/shiny-smoother/run-static.R
    See examples/shiny-smoother/run-gridSVG.R

    Summary is that Shiny makes some assumptions about how the web
    app is going to work and those assumptions do not fit well with
    the incremental-update style that Simon is trying out.

    See examples/shiny-smoother/shiny-smoother.org

  + sampvar (VIT) reflection:
    - already have examples/sampling-variation/sampling-variation.org
      which discusses D3 difficulties
    - could we add reflections on gains over old VIT ?
    - could we add reflections on comparison wiht what you would
      have to do if you only had D3 (or raphael) ?
    - ESSENTIALLY, some sort of more complete document that gives
      a wider, overall view of where you have got so far (in terms
      of dynamically updating graphical content in a web page by
      communicating with R)

    See sampvar-reflections.org

  + Try to start a summary for Chambers Award
    - "All application materials must be received by 5:00pm EST, Monday,
       February 18, 2013"

    See jmc/summary.pdf


PAUL TODO:

  + Read sampvar-reflections.org

  + Write a letter for Simon's Chamber's Award application
    - read Simon's summary for application
    - check what else is required for application


2013-01-08
----------

DISCUSS:

  + Don't forget to start the thesis writing
    - Arden Miller says that there are no dept-specific guidelines
      for thesis writing (that he knows of)


PAUL TODO:

  + review latest version of timing-manager doc


TODO:

  + Try to start a summary for Chambers Award
    - "All application materials must be received by 5:00pm EST, Monday,
       February 18, 2013"

  + Do a 'shiny' version of sampling variation

  + Some ideas ...
    - scale up sampling variation to longer animation;  does it scale?
    - can you provide a simpler interface for describing the
      animation actions?
    - can you abstract out another step in the animation description?
      e.g., WHAT you are animating from HOW you are animating it

  + sampvar (VIT) reflection:
    - already have examples/sampling-variation/sampling-variation.org
      which discusses D3 difficulties
    - could we add reflections on gains over old VIT ?
    - could we add reflections on comparison wiht what you would
      have to do if you only had D3 (or raphael) ?
    - ESSENTIALLY, some sort of more complete document that gives
      a wider, overall view of where you have got so far (in terms
      of dynamically updating graphical content in a web page by
      communicating with R)
 
  + Ideas for another dynamically updating web graphic welcome!
    - interactive graphics (e.g., linking and brushing and zooming)?
      + select points on a plot and have the linear regression line
        ONLY for the selected points (?)
    - Explore ways to do the d3 linked scatterplot matrix?
      See examples/brushing/d3/
      - NOTE: to run, you can start an HTTP server to serve the files in
            that directory by ...
            python -m SimpleHTTPServer
            ... then you get something like ...
            Serving HTTP on 0.0.0.0 port 8000 ...
            ... so you open a browser and point it at ...
            http://0.0.0.0:8000/iris-splom.html
      - is it possible to orthogonalise the description of linkages
        in a similar way to which animaker orthogonalised the 
        dscription of timing information for animations ??
    - Adding *transitions* to existing manipulation tools
      e.g., change order of bars in barplot, BUT bars
      transition from one position to another rather than
      instantly reappear;  may require callback to R just to get
      new positions for transition
    - Linked scatterplot and analysis (regression) with ability
      to identify outliers via brushing;  callback to R to 
      update regression line and output with outliers removed

  + Embellishing sampling-variation
    - choose your own data set
    - choose your own statistic
    - granularity of sampling

    - as well as "start", allow "pause", or even "rewind"
      (or even a slider!)


DONE:

  + webGL from 'rgl' => dynamically updating 3D web graphics!?
    - lots of work to not get quite what you want?


FOR NOTING:

  + Interesting way to embed editable R code samples in web pages
    via Sage

    http://statisfactions.com/2013/interactive-r-code-widget/

  + Blog on using gridSVG for plot with (fancy) tooltips

    http://procomun.wordpress.com/2013/01/04/tooltips-with-r/

  + The 'visnab' project 

    http://www.stat.iastate.edu/centers/CCGS/slides/slides-visnab.pdf

    Specifically for genomics, but uses some R tools that we should
    keep an eye on (specifically, the Qt suite of packages)

  + blog post on Rook (tutorial)

    http://anythingbutrbitrary.blogspot.co.nz/2012/12/a-simple-web-application-using-rook.html

  + Example use of RGoogleVis

    http://pairach.com/2012/12/21/visualising-tourism-data-using-r-with-googlevis-package/

  + Shiny + R version of D3 brushable scatterplot

    http://timelyportfolio.blogspot.co.nz/2012/12/shinyr-conversion-of-another-one-of-my.html

  + Shiny + gridSVG example (entire plot recreated)

    http://timelyportfolio.blogspot.co.nz/2012/12/shiny-svg-no-d3new-and-improved.html


2013-12-19
----------

DISCUSS:

  + When (and how) should Simon start writing the final thesis?!

    Paul spoke to Fiona Bellinger at the School of Graduate Studies

    - Must produce a standard format thesis for print
      (hopefully can cut-and-paste text from technical reports,
       but will need to include static images
       [obviously with links to online reports with dynamic images!])

      See "Guide to Theses and Dissertations"
      http://www.auckland.ac.nz/uoa/cs-pg-masters-theses-and-dissertations

      Could submit copy of software and tech reports along with
      thesis on digital media (?)

  + Idea for interactive/dynamic web graphics:  an iPlots implementation
    in the web browser?


TODO:

  + Try to start a summary for Chambers Award

  + Do a 'shiny' version of sampling variation

  + Some ideas ...
    - scale up sampling variation to longer animation;  does it scale?
    - can you provide a simpler interface for describing the
      animation actions?
    - can you abstract out another step in the animation description?
      e.g., WHAT you are animating from HOW you are animating it

  + sampvar (VIT) reflection:
    - already have examples/sampling-variation/sampling-variation.org
      which discusses D3 difficulties
    - could we add reflections on gains over old VIT ?
    - could we add reflections on comparison wiht what you would
      have to do if you only had D3 (or raphael) ?
    - ESSENTIALLY, some sort of more complete document that gives
      a wider, overall view of where you have got so far (in terms
      of dynamically updating graphical content in a web page by
      communicating with R)
 
  + Ideas for another dynamically updating web graphic welcome!
    - interactive graphics (e.g., linking and brushing and zooming)?
      + select points on a plot and have the linear regression line
        ONLY for the selected points (?)
    - Explore ways to do the d3 linked scatterplot matrix?
      See examples/brushing/d3/
      - NOTE: to run, you can start an HTTP server to serve the files in
            that directory by ...
            python -m SimpleHTTPServer
            ... then you get something like ...
            Serving HTTP on 0.0.0.0 port 8000 ...
            ... so you open a browser and point it at ...
            http://0.0.0.0:8000/iris-splom.html
      - is it possible to orthogonalise the description of linkages
        in a similar way to which animaker orthogonalised the 
        dscription of timing information for animations ??

  + Embellishing sampling-variation
    - choose your own data set
    - choose your own statistic
    - granularity of sampling

    - as well as "start", allow "pause", or even "rewind"
      (or even a slider!)

  + webGL from 'rgl' => dynamically updating 3D web graphics!?

DONE:

  + Added to 'animaker'
    - NAMESPACE
    - some documentation 
    - functions to export as JSON (or javascript variable) possibly as 
      external file

  + Expand timing-manager-ex.html to include REALLY simple
    examples so can show javascript code
    - define an action function
    - load timing information from R
    - register the action
    - play() or frameApply()


FOR NOTING:

  + Another couple of D3 examples (with R shiny version)

    http://timelyportfolio.blogspot.co.nz/2012/12/more-d3-with-shiny-and-r-cpi-from-blsgov.html

    http://timelyportfolio.blogspot.co.nz/2012/12/shiny-r-d3-adaptation-of-mike-bostocks.html

    http://timelyportfolio.blogspot.co.nz/2012/12/d3-shiny-and-r-reporting-performance.html


2012-12-12
----------

TODO:

  + Expand timing-manager-ex.html to include REALLY simple
    examples so can show javascript code
    - define an action function
    - load timing information from R
    - register the action
    - play() or frameApply()

  + Try to start a summary for Chambers Award

  + Do a 'shiny' version of sampling variation

  + Some ideas ...
    - scale up sampling variation to longer animation;  does it scale?
    - can you provide a simpler interface for describing the
      animation actions?
    - can you abstract out another step in the animation description?
      e.g., WHAT you are animating from HOW you are animating it

  + sampvar (VIT) reflection:
    - already have examples/sampling-variation/sampling-variation.org
      which discusses D3 difficulties
    - could we add reflections on gains over old VIT ?
    - could we add reflections on comparison wiht what you would
      have to do if you only had D3 (or raphael) ?
    - ESSENTIALLY, some sort of more complete document that gives
      a wider, overall view of where you have got so far (in terms
      of dynamically updating graphical content in a web page by
      communicating with R)
 
  + Ideas for another dynamically updating web graphic welcome!
    - interactive graphics (e.g., linking and brushing and zooming)?
      + select points on a plot and have the linear regression line
        ONLY for the selected points (?)

  + Embellishing sampling-variation
    - choose your own data set
    - choose your own statistic
    - granularity of sampling

    - as well as "start", allow "pause", or even "rewind"
      (or even a slider!)

  + webGL from 'rgl' => dynamically updating 3D web graphics!?


DONE:

  + Demos of TimingManager using D3 (?)

    See examples/animaker/timing-manager-ex.html

  + Try to use animation control system to redo VIT example?
  
    See examples/sampling-variation/sampvar.html 
      (especially javascript at bottom)
    See examples/sampling-variation/timing.R

    - SUCCESS!
      + javascript code is not any smaller in size (in fact there is a
        lot of extra javascript code produced from timing.R, but that's
        all automated;  plus there is new timing-manager.js, but that's
        fixed) 
      + BUT we have successfully separated TIMING from ACTIONS
      + The javascript code consists of a set of individual animation actions
        and the coordination of the actions ALL happens in timing.R 
        (which is very simple), with a tiny amount of simple javascript
        code to make use of the information generated by timing.R

  + Update notes on Shiny (RStudio web apps) ?


FOR NOTING:

  + Another D3 and R example (nothing to "worry" about ?)

    http://timelyportfolio.blogspot.co.nz/2012/12/d3-and-r-interacting-through-shiny.html


2012-12-05
----------

TODO:

  + Try to start a summary for Chambers Award

  + Demos of TimingManager using D3 (?)

  + Update notes on Shiny (RStudio web apps) ?

  + Try to use animation control system to redo VIT example?
  
  + sampvar (VIT) reflection:
    - already have examples/sampling-variation/sampling-variation.org
      which discusses D3 difficulties
    - could we add reflections on gains over old VIT ?
    - could we add reflections on comparison wiht what you would
      have to do if you only had D3 (or raphael) ?

  + Embellishing sampling-variation
    - choose your own data set
    - choose your own statistic
    - granularity of sampling

    - as well as "start", allow "pause", or even "rewind"
      (or even a slider!)


DONE:

  + Demonstrated that implementing an animation control system
    (see Paul's aniMaker code and doc)
    in javascript was a fool's errand
    See examples/animaker/animaker.js

  + Wrote javascript to consume timing information from 
    'animaker' instead
    See examples/animaker/timing.js


PAUL TODO:

  + git clean -f (?)


DISCUSS:

  + ASA Stat. Computing & Stat. Graphics Student Paper Competition 2013

  + ASA John M. Chambers Statistical Software Award - 2013

  + Add Simon as "collaborator" on 'animaker' github repo

  + Walk through handling pull request ?


FOR NOTING:

  + Another R-web solution worth keeping an eye on ?

    http://rapporter.net/


2012-11-28
----------

DISCUSS:

  + 'animaker' package on github

    https://github.com/pmur002/animaker

  + ASA Stat. Computing & Stat. Graphics Student Paper Competition 2013

  + ASA John M. Chambers Statistical Software Award - 2013

  + Simon: Shouldn't you be able to insert a track into a sequence?
    Paul:  YES!  See https://github.com/pmur002/animaker


TODO:

  + Continue to implement an animation control system
    (see Paul's aniMaker code and doc)

  + Try to use animation control system to redo VIT example?
  
  + sampvar (VIT) reflection:
    - already have examples/sampling-variation/sampling-variation.org
      which discusses D3 difficulties
    - could we add reflections on gains over old VIT ?
    - could we add reflections on comparison wiht what you would
      have to do if you only had D3 (or raphael) ?

  + Embellishing sampling-variation
    - choose your own data set
    - choose your own statistic
    - granularity of sampling

    - as well as "start", allow "pause", or even "rewind"
      (or even a slider!)


DONE:

  + Add better example to end of 'selectr' tech report
    See http://stattech.wordpress.fos.auckland.ac.nz/2012-10-introducing-the-selectr-package/

  + Try again to implement an animation control system
    (see Paul's aniMaker code and doc)
    
    See examples/animaker/
    (from google-chrome open examples/animaker/animaker-qunit.html,
     Ctrl-shift-j for console, then, e.g., a.printTiming(true),
     aContainer.printTiming(true) [all examples from R animaker doc
     implemented)

    ESPECIALLY see examples/animaker/animaker-ex.js


FOR NOTING: 

  + Someone else (Yihui Xie) combining R and D3 (but with D3 doing the drawing)

    http://vis.supstat.com/2012/11/contour-plots-with-d3-and-r/

  + Simple interaction example (but which would extend to web page with
    R as server)

    Two plots:  click on left one and right one updates

    R-help 2012-11-28 from Baoqiang Cao


2012-11-21
----------

DISCUSS:

  + aniMaker

    - Sources:  see examples/timelines/timeline.org
                PLUS M$ MovieMaker

  + SMIL

    - animation is declarative so everything has to be known in 
      advance (cannot generate what or when or how to animate 
      on-the-fly, which you CAN do via javascript).

  + Updated 'selectr' tech report


TODO:

  + Add better example to end of 'selectr' tech report

  + Try again to implement an animation control system
    (see Paul's aniMaker code and doc)

  + Try to use animation control system to redo VIT example?
  
  + sampvar (VIT) reflection:
    - already have examples/sampling-variation/sampling-variation.org
      which discusses D3 difficulties
    - could we add reflections on gains over old VIT ?
    - could we add reflections on comparison wiht what you would
      have to do if you only had D3 (or raphael) ?

  + Embellishing sampling-variation
    - choose your own data set
    - choose your own statistic
    - granularity of sampling

    - as well as "start", allow "pause", or even "rewind"
      (or even a slider!)


DONE:

  + Write tech report on 'selectr'

  + Multiple namespaces in querySelectorNS() ?

  + some bug fixes for 'selectr'

    INCLUDING pushing (Python) versions back to original Python library


2012-11-14
----------

DISCUSS:

  + Paul's comments on 'selectr' tech report


TODO:

  + Multiple namespaces in querySelectorNS() ?

  + Write tech report on 'selectr'

  + Tidy and polish timelines code
    
  + Try to use timelines code to redo VIT example?
  
  + Consider whether timelines can be composed of other timelines?
    (not just composed of animations;  i.e., recursive, arbitrary-depth,
     hierarchical structure rather than fixed 3-depth structure)
    -

  + sampvar (VIT) reflection:
    - already have examples/sampling-variation/sampling-variation.org
      which discusses D3 difficulties
    - could we add reflections on gains over old VIT ?
    - could we add reflections on comparison wiht what you would
      have to do if you only had D3 (or raphael) ?

  + Embellishing sampling-variation
    - choose your own data set
    - choose your own statistic
    - granularity of sampling

    - as well as "start", allow "pause", or even "rewind"
      (or even a slider!)


DONE:

  + tidy up 'selectr' package

  + 'selectr' on CRAN ...

    http://cran.r-project.org/web/packages/selectr/index.html

    ... and with its own github repo ...
    
    https://github.com/sjp/selectr


FOR NOTING:

  + 'Shiny' package for rapid development of R web apps

    http://www.rstudio.com/shiny/

    (from the R Studio guys)

  + More coolness from Mike Bostock (et al)

    http://www.nytimes.com/interactive/2012/11/07/us/politics/obamas-diverse-base-of-support.html


2012-11-07
----------

FOR NOTING:

  + Fancy interactive graphic for US election by Mike Bostock
    (D3 guy)

    http://www.nytimes.com/interactive/2012/11/02/us/politics/paths-to-the-white-house.html


TODO:

  + tidy up 'selectr' package

  + submit 'selectr' to CRAN

  + Write tech report on 'selectr'

  + Tidy and polish timelines code
    
  + Try to use timelines code to redo VIT example?
  
  + Consider whether timelines can be composed of other timelines?
    (not just composed of animations;  i.e., recursive, arbitrary-depth,
     hierarchical structure rather than fixed 3-depth structure)
    -

  + sampvar (VIT) reflection:
    - already have examples/sampling-variation/sampling-variation.org
      which discusses D3 difficulties
    - could we add reflections on gains over old VIT ?
    - could we add reflections on comparison wiht what you would
      have to do if you only had D3 (or raphael) ?

  + Embellishing sampling-variation
    - choose your own data set
    - choose your own statistic
    - granularity of sampling

    - as well as "start", allow "pause", or even "rewind"
      (or even a slider!)


DONE: 

  + Got 'selectr' package going, including tests and help files.


2012-10-31
----------

FOR NOTING:

  + Simon's project talk (May/June 2013) could be a dept seminar!?
    - normal 2 paper project => 20min talk
      so 6 paper project => 1 hr talk?

    
DISCUSS:

  + Paul wants to commit changes to gridSVG, but they will require
    a bump to R dependency R >= 2.16.0

    If Paul does this, that will mean that lots of Simon's stuff 
    only becomes available with r-devel (until next April or something)

    What to do?  (commit Simon's stuff so far as separate version?)


TODO:

  + Tidy and polish timelines code
    
  + Try to use timelines code to redo VIT example?
  
  + Consider whether timelines can be composed of other timelines?
    (not just composed of animations;  i.e., recursive, arbitrary-depth,
     hierarchical structure rather than fixed 3-depth structure)
    -

  + sampvar (VIT) reflection:
    - already have examples/sampling-variation/sampling-variation.org
      which discusses D3 difficulties
    - could we add reflections on gains over old VIT ?
    - could we add reflections on comparison wiht what you would
      have to do if you only had D3 (or raphael) ?

  + Embellishing sampling-variation
    - choose your own data set
    - choose your own statistic
    - granularity of sampling

    - as well as "start", allow "pause", or even "rewind"
      (or even a slider!)


DONE:

  + Started R package to convert CSS selectors to XPaths
    (so can specify selections of SVG elements in R just like you
     would in SVG with D3)

  + Tidy and polish timelines code
    - can spec constants rather than functions
    
  + Consider whether timelines can be composed of other timelines?
    (not just composed of animations;  i.e., recursive, arbitrary-depth,
     hierarchical structure rather than fixed 3-depth structure)
    - can have timelines within timelines


2012-10-24
----------

TODO:

  + Tidy and polish timelines code

  + Try to use timelines code to redo VIT example?

  + Consider whether timelines can be composed of other timelines?
    (not just composed of animations;  i.e., recursive, arbitrary-depth,
     hierarchical structure rather than fixed 3-depth structure)
    - yes, timelines should be able to be interchangeable with tracks
      (e.g., should be able to repeat a timeline [within a timeline])

  + sampvar (VIT) reflection:
    - already have examples/sampling-variation/sampling-variation.org
      which discusses D3 difficulties
    - could we add reflections on gains over old VIT ?
    - could we add reflections on comparison wiht what you would
      have to do if you only had D3 (or raphael) ?

  + Embellishing sampling-variation
    - choose your own data set
    - choose your own statistic
    - granularity of sampling

    - as well as "start", allow "pause", or even "rewind"
      (or even a slider!)


DONE:

  + Is there a javascript library that allows "storyboarding" an
    animation (high-level, declarative specification of animation timeline) ?

    See examples/timelines/
    including examples/timelines/timeline.org

  + Reinstall 'XML' package to avoid segfaults (?)

R CMD INSTALL --configure-args='--enable-nodegc=no' XML_3.9-4.tar.gz 


2012-10-17
----------

DISCUSS:

  + Did we already know about iWebplots package?

  + Did we already know about aplpack package (with its "slider functions")


TODO:

  + Is there a javascript library that allows "storyboarding" an
    animation (high-level, declarative specification of animation timeline) ?

    IF NOT, what would one look like ?
    What do the movie/game maker guys do (conceptually) ?
    What did Xlisp-Stat allow you to do ?
    What does Flash (et al) let you do ?

  + Reinstall 'XML' package to avoid segfaults (?)

R CMD INSTALL --configure-args='--enable-nodegc=no' XML_3.9-4.tar.gz 

  + sampvar (VIT) reflection:
    - already have examples/sampling-variation/sampling-variation.org
      which discusses D3 difficulties
    - could we add reflections on gains over old VIT ?
    - could we add reflections on comparison wiht what you would
      have to do if you only had D3 (or raphael) ?

  + Embellishing sampling-variation
    - choose your own data set
    - choose your own statistic
    - granularity of sampling

    - as well as "start", allow "pause", or even "rewind"
      (or even a slider!)


DONE:

  + VIT example complete!

  + Update 'gridSVG' changes.txt to NEWS.Rd


2012-10-11
----------

DISCUSS:
  
  + gridSVG coordinates article

    - "published" as tech report?

  + An example high-level convenience function ... ?
  
    linkHighlight(gPath1, gPath2, grep=FALSE, global=FALSE)

  + Exporting metadata
  
    Possible to export something like dput() output for each
    viewport and grob that gets exported?

    Then possible to recreate original grid scene from SVG document ?
    (or at least an equivalent)


TODO:

  + continue VIT example

  + Update 'gridSVG' changes.txt to NEWS.Rd

  + Thinking about APIs/libraries

    - function to call R (from browser) to generate SVG content
      and place it within ID element in page

      or generate SVG fragment

      or place within ID within existing SVG conent in page

      ... ?


PAUL TODO:

  + Generating SVG doc 

    See articles/generating-svg/


DONE:
  
  + Restructure examples/time-series (again)

    See examples/time-series/time-series-restructured.org

  + Working on VIT example


2012-10-03
----------

DISCUSS:

  + Bioc-devel thread may contain useful information on making
    knitr document a package vignette

    https://stat.ethz.ch/pipermail/bioc-devel/2012-September/003696.html

    particularly the pointer to ...

    http://yihui.name/knitr/demo/vignette/

    ... which actually argues AGAINST making a doc a vignette !

  + 'Rook' should be back on CRAN;  some functionality has been
    disabled so need to check that this does not affect us.


TODO:

  + Redo time series example using 'backbone'

    - Think about what an API might be like for a javascript library 
      that others could use to combine 'grid' and 'gridSVG' and javascript
      (via callbacks)
      
  + VIT example next ?


DONE:

  + Redo time series example using 'backbone'

    Start made on understanding how to use the js libraries properly

  + Keep writing a vignette for 'gridSVG' for the viewport coordinate
    export/import/use in javascript
    as HTML + SVG (ready for tech report?)

    - Develop as Dept Tech Report?
    - some example images are interactive
    - includes warnings if browser doesn't cut the mustard

    - see articles/coordinates/

  + Tech report for XML-basis for gridSVG 
    - draft
    - see articles/generating-svg/

  + Summary doc of technologies used (successfully) so far

    - what are they useful for?
    - how necessary are they?
    - how do they fit together?
    - what needs to be done better/easier?
    - sort of an update to litreview.org

    - see tech-summary.org


2012-09-26
----------

DISCUSS:

  + Publish gridSVG viewport coordinates vignette as Stats Dept
    Tech Report ?  With me as co-author ?

    Maybe use different authoring tech so can easily produce 
    HTML version (with SVG plots) => remove from package ?

  + Need a specific complaint about source() method in 'XML',
    ideally with nice self-contained example, before I can 
    email Duncan TL

  + Rook plotting example (check it's just static plots)

     http://r.789695.n4.nabble.com/creating-graphs-using-Rook-tp4643458.html


TODO:

  + Redo time series example using 'backbone'

    - Think about what an API might be like for a javascript library 
      that others could use to combine 'grid' and 'gridSVG' and javascript
      (via callbacks)
      
  + Keep writing a vignette for 'gridSVG' for the viewport coordinate
    export/import/use in javascript

    - Develop as Dept Tech Report?

  + Tech report for XML-basis for gridSVG ?

  + Summary doc of technologies used (successfully) so far

    - what are they useful for?
    - how necessary are they?
    - how do they fit together?
    - what needs to be done better/easier?
    - sort of an update to litreview.org

  + Another one for the record:  could we do text justification better?

    - javascript text ?
    - use svg() output (text as paths) ?

  + For the record:  what happens with NAs ?
    In particular, what happens with naming of SVG elements ?
    (if value i is NA then is element (i+1) called "name-i" or "name-(i+1)"?
     and what should it be?)
    
  + Need a more "real" example

    - Stripped down version of one of Chris's simulation movies?
    - Reimplement some of the googleViz style plots?
    - Gapminder style plots ?

  + Keep thinking about categorisation of different options
    (including diagram and glossary)


DONE:

  + Reimplement SVG comments in 'gridSVG' as their own sort of grob
    (NOT necessarily attached to a existing grob)

  + Get the plot y-scale to dynamically update!
    (without reproducing the entire plot)
    e.g., generate new scale grobs + coord info
    (i.e., MODIFY the viewport!)

    - See examples/time-series/rook-ts.R

  + support for new ggplot2

grobToDev.gtable <- build either a c("gtableParent", "gTree") or 
                    c("gtableChild", "gtableParent", "gTree")

grobToDev.gtableChild <- enforce wrapvp, NextMethod(), unwind

grobToDev.gtableParent <- enforce layoutvp, same as gTree, unwind


PAUL DONE:

  + Comments on viewport coordinates vignette

    - It is looking REALLY GOOD!

    - page 1, bottom, "retain the original +grid coordinate systems+"
    - page 2, show the image that is produced by the code
    - page 2, after first sentence below code, 
      "The important point is that we want to add new drawing
       *relative to* the axis coordinate systems"
    - page 2, above second code, 
      "(See the "x" and "y" attributes in the <use> elements below"
      OR
      page 2, bottom para, shift above the code.
    - page 3, above section break, mention that javascript functions
      are also exported to make use of this data "(see next section)"
    - page 3, bottom, "+This loads the SVG image+"
    - page 4, first para, "of the viewport" should be "of a grob" ?
    - page 4, middle, description of viewportConvertX/Y need updating?
    - page 4, bottom, "main panel" should be "viewport 'panelvp'
      (the plot region)"
    - page 5, code, mention that circle radius is just in pixels,
      but it could also be converted (or even convert it!)
    - page 5, end of section, I have changed my mind:  I think do NOT
      refer forward to future sections, just mention that there are
      more sophisticated applications.  In your thesis, some forward
      pointers might be useful to tie sections together, but I think
      we can keep this document stand-alone for now.
    - page 5, new section, make it clear that this can be a new R
      session, separate from the R session that created the original
      image (and not needing any of the code or even packages that
      were used to create the original image).
    - page 6, middle, why is the result of gridSVGCoords() not 
      assigned anywhere?
    - page 6, bottom, "also available in +R+" ???
    - page 7, again, having changed my mind, do NOT refer forward,
      just mention the possible more complex applications.
    

2012-09-19
----------

DISCUSS:
 
  + possible viewport name problem ... ?

pushViewport(viewport(name="A"))
popViepwort()
# Viewport with same path, but different coordinates
pushViewport(viewport(name="A", xscale=c(0, 100)))
gridToSVG()

    - No problem for <g> IDs 
    - ONLY problem is matching <g> IDs to coordinate information in JSON
    - SOLUTION:  brute force = record separate coordinate info for each ID
      (fancier solution would involve separate coordinate info as needed
       PLUS more complex coordinate info lookup, but probably not worth it)


TODO:

  + Reimplement SVG comments in 'gridSVG' as their own sort of grob
    (NOT necessarily attached to a existing grob)

  + For the record:  what happens with NAs ?
    In particular, what happens with naming of SVG elements ?
    (if value i is NA then is element (i+1) called "name-i" or "name-(i+1)"?
     and what should it be?)
    
  + Get the plot y-scale to dynamically update!
    (without reproducing the entire plot)
    e.g., generate new scale grobs + coord info
    (i.e., MODIFY the viewport!)

  + support for new ggplot2

grobToDev.gtable <- build either a c("gtableParent", "gTree") or 
                    c("gtableChild", "gtableParent", "gTree")

grobToDev.gtableChild <- enforce wrapvp, NextMethod(), unwind

grobToDev.gtableParent <- enforce layoutvp, same as gTree, unwind
  
  + Keep writing a vignette for 'gridSVG' for the viewport coordinate
    export/import/use in javascript

    - Develop as Dept Tech Report?

  + Need a more "real" example

    - Stripped down version of one of Chris's simulation movies?
    - Reimplement some of the googleViz style plots?
    - Gapminder style plots ?

  + Keep thinking about categorisation of different options
    (including diagram and glossary)


DONE:

  + gridToSVG() should not have to xmlParse(doctxt), just return
    svgroot

  + Use <symbol> elements for data symbols

    - implement in gridSVG (animate.R)

  + Also see updates to 'gridSVG' (inst/doc/changes.txt)

    - raster grobs now produce inline SVG
    - points grobs now implemented as <symbol>s and <use>s
      (and the package has shed about 1000 lines of code)


2012-09-12
----------

DISCUSS:

  + A selection of Keith Ng's data viz efforts

    http://publicaddress.net/who-is-keith-ng-1/

  + NZ Herald's "first online interactive infographic"

    http://www.nzherald.co.nz/crime/news/article.cfm?c_id=30&objectid=10833156

  + Slides for talk on interactive graphics

    http://dl.dropbox.com/u/7586336/RSS2012/googleVis_at_RSS_2012.html

    including list of technologies

    http://dl.dropbox.com/u/7586336/RSS2012/googleVis_at_RSS_2012.html#%287%29

    and mention that Google Viz API includes ability to "edit" plots
    (similar to dialog boxes for editing Excel charts)

    http://dl.dropbox.com/u/7586336/RSS2012/googleVis_at_RSS_2012.html#%2834%29

  + Article on "Generalized pairs plots"

    http://amstat.tandfonline.com/doi/full/10.1080/10618600.2012.694762

    Mentions "interactive graphics challenges" at the end


TODO:

  + For the record:  what happens with NAs ?
    In particular, what happens with naming of SVG elements ?
    (if value i is NA then is element (i+1) called "name-i" or "name-(i+1)"?
     and what should it be?)
    
  + gridToSVG() should not have to xmlParse(doctxt), just return
    svgroot

  + Get the plot y-scale to dynamically update!
    (without reproducing the entire plot)
    e.g., generate new scale grobs + coord info
    (i.e., MODIFY the viewport!)

  + Use <symbol> elements for data symbols

    - implement in gridSVG (animate.R)

  + Keep writing a vignette for 'gridSVG' for the viewport coordinate
    export/import/use in javascript

  + Need a more "real" example

    - Stripped down version of one of Chris's simulation movies?
    - Reimplement some of the googleViz style plots?
    - Gapminder style plots ?

  + Keep thinking about categorisation of different options
    (including diagram and glossary)


DONE:

  + Read Jimmy Oh's LitReview (graphical tools section)

  + Use 'XML' to generate SVG content in 'gridSVG'

    - this should be FASTER
    - should make code less ugly (svg.R)
    - generates SVG in memory so have option to not create file
      AND can just return content as XML objects AND can 
      easily return just FRAGMENTS of SVG content AND
      get greater control over structure of SVG content
      (e.g., can insert nodes anywhere in XML tree at any time)
      AND will get better and automatic indentation !

  + Started using <symbol> elements for data symbols


PAUL DONE:

  + Comments on vignette draft 
    "Working with the gridSVG Coordinate System"

    - To turn this into an article, we would need a brief
      review of grid and gridSVG at the start.  I could do that
      unless you want to have a go.

    - First para, instead of "everything" maybe say "all locations
      and dimensions of graphical objects", or even more explicitly,
      "rather than being positioned within a viewport, all drawing
      is within a single pixel-based coordinate system".  Maybe also
      mention that this happens because 'grid' viewports do not
      translate directly to SVG <g> elements with 'transform' 
      attributes.

    - top of page 2, give an explicit (small) example to show x/y 
      locations in SVG to show that they are pixel coordinates that
      are NOT the same as the original x/y values specified in the
      'grid' calls

    - middle of page 2, also mention that viewport *names* are 
      recorded (plus last sentence of the same paragraph is a
      bit awkward => reword somehow)

    - Maybe use JS> as prompt for javascript code and R> as prompt
      for R code (?)

    - Maybe allow viewportConvertX/Y() to convert to anything 
      (like viewportConvertWidth/Height()) - even if it is not 
      used much, if it is possible, someone will want to do it 
      sometime.

    - end of section page 4, although you have (rightly) focused
      on a simple example that just requires R, you could foreshadow 
      later sections that will use this capability to implement
      interactive image manipulation in browser via javascript.
      Just a simple sentence that points the reader forward to
      later sections (to be written).

    - end of section page 6, similar, but this time foreshadow
      use of this capability to callback to R from browser.


2012-09-05
----------

DISCUSS:

  + Change regular meeting time to Wednesday 2-3 !

  + Time series document is excellent!

    Only one thought:  have you tried simply replacing old content
    with new content (rather than using new values to transition 
    existing content) ?

    One reason:  if you replace OLD with NEW, you might lose some
    useful attributes on OLD (PLUS you wouldn't be able to do the
    fancy D3 transitions)

  + David Bank's SVG embedded in HTML with javascript glue

    Easier or harder to have R as server ?  (less javascript)

  + Ok to give Jimmy Oh example of Simon's documentation ?


TODO:

  + Read Jimmy Oh's LitReview (graphical tools section)

  + Use 'XML' to generate SVG content in 'gridSVG'

    - this should be FASTER
    - should make code less ugly (svg.R)
    - generates SVG in memory so have option to not create file
      AND can just return content as XML objects AND can 
      easily return just FRAGMENTS of SVG content AND
      get greater control over structure of SVG content
      (e.g., can insert nodes anywhere in XML tree at any time)
      AND will get better and automatic indentation !

  + Get the plot y-scale to dynamically update!
    (without reproducing the entire plot)
    e.g., generate new scale grobs + coord info
    (i.e., MODIFY the viewport!)

  + Use <symbol> elements for data symbols

    - implement in gridSVG (animate.R)

  + Keep writing a vignette for 'gridSVG' for the viewport coordinate
    export/import/use in javascript

  + Need a more "real" example

    - Stripped down version of one of Chris's simulation movies?
    - Reimplement some of the googleViz style plots?
    - Gapminder style plots ?

  + Keep thinking about categorisation of different options
    (including diagram and glossary)


DONE:

  + name coord info by viewport *path* 
    (plus name mangle to ensure uniqueness)
    [watch out for path separator being invalid ID char]

  + Use <symbol> elements for data symbols?

    - better than <g> solution we currently have because
      simpler, faster (only one <symbol> then lots of <use>s)

      BUT only if animation of <symbol> works
      (e.g., animating 'width' of <symbol> does NOT scale 'width'
       of lines drawn within <symbol>)

      (OR animation of <use> works)

    SEE examples/svg-symbols/point-symbol-test.svg

    Summary:  looks promising

  + Write a vignette for 'gridSVG' for the viewport coordinate
    export/import/use in javascript

    - simple example to show export
    - simple javascript to add point relative to plot scales
    - "simple" manipulate SVG within R (via 'XML' package) to
      show import 

  + Add 'RJSONIO' as dependency for 'gridSVG'


PAUL TODO:

  + Produce example documentation from Simon's .org files

    C-c C-e then, e.g., 'H' for temp HTML buffer

  + Read the vignette draft


2012-08-28
----------

TODO:

  + Get the plot y-scale to dynamically update!
    (without reproducing the entire plot)
    e.g., generate new scale grobs + coord info
    (i.e., MODIFY the viewport!)

  + name coord info by viewport *path* 
    (plus name mangle to ensure uniqueness)
    [watch out for path separator being invalid ID char]

  + Use <symbol> elements for data symbols?

    - better than <g> solution we currently have because
      simpler, faster (only one <symbol> then lots of <use>s)

      BUT only if animation of <symbol> works
      (e.g., animating 'width' of <symbol> does NOT scale 'width'
       of lines drawn within <symbol>)

      (OR animation of <use> works)

  + Write a vignette for 'gridSVG' for the viewport coordinate
    export/import/use in javascript

    - simple example to show export
    - simple javascript to add point relative to plot scales
    - "simple" manipulate SVG within R (via 'XML' package) to
      show import 

  + Add 'RJSONIO' as dependency for 'gridSVG'

  + Need a more "real" example

    - Stripped down version of one of Chris's simulation movies?
    - Reimplement some of the googleViz style plots?
    - Gapminder style plots ?

  + Keep thinking about categorisation of different options
    (including diagram and glossary)


DONE:

  + MAKE SURE YOU put your name on everything you do

  + Document the new examples (at least novel features of them)

    See examples/time-series/time-series.org

  + export javascript coordinate conversion functions from 'gridSVG'
    (controlled by arg just like coordinate info)

  + add R coordinate conversion functions to 'gridSVG'

  + Document the new 'gridSVG' features

    see gridSVG!


2012-08-21
----------

DISCUSS:

  + Sasha Goodman asks:

    "Do you know if websockets can handle high volumes of users?"
 
  + Nunez example


NOTES:

  + R event handler code needs to be able to see the coordinate info
    that goes with the SVG file that is calling back to it ?

    In other words, do we need conversion functions in R to
    convert between coordinate systems in the SVG image?

    Yes, at least sometimes.  Best option is to provide this so
    that people can either generate values in R and then convert 
    them in javascript OR generate and convert in R and just 
    send px values back to javascript.  Allows developer to  
    choose whichever is easiest.

    It is NOT completely mental because, although the coordinate info
    is already available in R when you *draw* the image (using grid
    and gridSVG), a new R session that the SVG code talks to has
    NO IDEA about the structure of the SVG image unless we send
    it to the new R session.

  + How to send coordinate info to R?  Only once up front or every
    time you make a request?  

    BOTH!  Have a "global" default, but allow per-request as well.

coinfogen <- function() { 
    info <- NULL
    function(newinfo=NULL) { 
        if (is.null(newinfo)) { 
            info 
        } else { 
            info <<- newinfo 
        }
    } 
}

> coinfo <- coinfogen()
> coinfo()
NULL
> coinfo(1)
> coinfo()
[1] 1


TODO:

  + MAKE SURE YOU put your name on everything you do

  + export javascript coordinate conversion functions from 'gridSVG'
    (controlled by arg just like coordinate info)

  + add R coordinate conversion functions to 'gridSVG'

  + Document the new examples (at least novel features of them)

  + Document the new 'gridSVG' features

  + Need a more "real" example

    - Stripped down version of one of Chris's simulation movies?
    - Reimplement some of the googleViz style plots?
    - Gapminder style plots ?

  + Keep thinking about categorisation of different options
    (including diagram and glossary)


DONE:

  + Export viewport transforms to SVG

    See examples/time-series/       (use google-chrome!)
        examples/unit-conversion/   (including unit tests!!!)
        examples/unit-conversion/coords.js  (example coordinate info)
        examples/unit-conversion/conversion.js  (conversion functions)
        examples/unit-conversion/location-test.html  (example usage)

    Also see gridsvg/ (to capture coordinate info and export it)


2012-08-14
----------

DISCUSS:

  + Extend the interactive campus map ?
    (William's project from a couple of years back)

  + Link to "Grammar of Graphics" Google group from Hadley

    https://groups.google.com/group/gsofgs


TODO:

  + Export viewport transforms to SVG

    - keep going

  + Need a more "real" example

    - Stripped down version of one of Chris's simulation movies?
    - Reimplement some of the googleViz style plots?
    - Gapminder style plots ?

  + Keep thinking about categorisation of different options
    (including diagram and glossary)


DONE: 

  + Export viewport transforms to SVG

    - current.transform() gets (some of) the info 
    - devGrob.viewport() needs to add the info 
    - svgStartGroup() needs to accumulate the info
    - svgClose() needs to write the info out (as JSON?)
    - also need to write a bunch of standard javascript functions
      to do the transformations, culminating in ...

      viewportConvertX(vpname, x, from, to)
      viewportConvertY(vpname, x, from, to)
      viewportConvertWidth(vpname, x, from, to)
      viewportConvertHeight(vpname, x, from, to)
    

PAUL DONE:

  + emailed Hadley Wickham, Jay Emerson, and Sasha Goodman just to let
    them know that we are working in the area (they are all doing  
    things vaguely similar).  This serves both to politely carve out
    a little space for ourselves and to create an opportunity for 
    feedback and ideas and examples from these other guys.


2012-08-09
----------

NOTES:

  + Simon's examples/websockets/smoother-example/
    is wildly good because it is the browser and R communicating
    to update the *graphics* DOM. 
    In particular, it is NOT just asking R for a completely new plot.
    It talks to R to get new information to MODIFY existing components
    of an existing plot (SVG DOM).

  + Also implemented the example with FastRWeb and Rook
    BUT FastRWeb is a pain in the ass to install/configure

  + In the websockets model, R sends messages to browser AND browser 
    sends messages to R.
    In the Rook (http) model, browser sends request to R and R 
    generates response.

  + There appear to be several people working on side-stepping R
    or reproducing R graphics in javascript (D3).
    The advantage of our approach is that we get (almost) all
    plots that grid can produce PLUS the grid graphics infrastructure
    (viewports etc) and THEN we can use D3 to manipulate it.
    => don't have to reimplement R/grid graphics (visible) output in javascript
    AND don't have to reimplement R/grid graphics (invisible) infrastructure


FOR NOTING:

  + Slides from Jay Emerson from JSM talk
    (see Resources/MikeSession.pdf)

  + Duncan Temple Lang (and Gabriel Becker) gave presentation at JSM
    on "RBrowserPlugin framework".  Can't find any other links to
    this, but it sounds like RFirefox (?)

  + project 'gg' on github

    https://github.com/gigamonkey/gg

    Allows Grammar of Graphics style description of plot
    and renders it using javascript (D3)

    Any interactivity???


TODO:

  + Export viewport transforms to SVG

    - current.transform() gets (some of) the info 
    - devGrob.viewport() needs to add the info 
    - svgStartGroup() needs to accumulate the info
    - svgClose() needs to write the info out (as JSON?)
    - also need to write a bunch of standard javascript functions
      to do the transformations, culminating in ...

      viewportConvertX(vpname, x, from, to)
      viewportConvertY(vpname, x, from, to)
      viewportConvertWidth(vpname, x, from, to)
      viewportConvertHeight(vpname, x, from, to)
    
  + Need a more "real" example

    - Stripped down version of one of Chris's simulation movies?
    - Reimplement some of the googleViz style plots?
    - Gapminder style plots ?

  + Keep thinking about categorisation of different options
    (including diagram and glossary)


DONE:

  + Can you use D3 to muck about with existing SVG?
    Can it be used as an "SVG accelerator" to render faster?

  + Push the three candidate R-as-web-server options (glossary!)
    a bit harder by trying to implement a more complex example
    (see "BIG EXAMPLE" below)

  + New D3 demo (see examples/d3/ggplot-demo.html)

  + Reorganize git repo

    - instead of 2012-07-25/2012-07-25.org 
      have litreview.org (at top level)

    - instead of 2012-07-25/Rook/ etc
      have Examples/Rook/
  

2012-07-31
----------

IDEA:

  + modify 'gridSVG' to auto-insert a javascript function, say convert(), 
    into SVG output (plus an array of constants) that effectively 
    records the coordinate system conversions for every 'grid'
    viewport.  Then you can easily write javascript code to 
    do things like add a new shape at a location within a viewport
    (SVG <g>) that are positioned relative to the "native" coordinate
    system of the original 'grid' viewport (e.g., draw stuff relative
    to plot axis scales)


TODO:

  + Reorganize git repo

    - instead of 2012-07-25/2012-07-25.org 
      have litreview.org (at top level)

    - instead of 2012-07-25/Rook/ etc
      have Examples/Rook/

  + Can you use D3 to muck about with existing SVG?
    Can it be used as an "SVG accelerator" to render faster?

  + Push the three candidate R-as-web-server options (glossary!)
    a bit harder by trying to implement a more complex example
    (see "BIG EXAMPLE" below)

  + Keep thinking about categorisation of different options
    (including diagram and glossary)


PAUL TODO:

  + Read Simon's notes


DONE:

  + Investigate some more R-web tech (Rook and R-Node and websockets)

    Executive summary:

    - Three possible candidates so far:  FastRWeb, Rook, and websockets

  + Add note about RStatServer (RSOAP, RSessionDA, R-Zope?)

    All Greg Warnes stuff that appears abandoned?

    http://research.warnes.net/statcomp/projects/RStatServer/   

  + Set up git repos for working with Paul

  + Keep thinking about categorisation of different options
    (including diagram and glossary)

  + Document the example code (and ALL example code from now on!)

    See 2012-07-25/*/ and 2012-07-25/*.org
    (e.g., 2012-07-25/Rook/ and 2012-07-25/Rook-example.org)

  + Explore javascript libraries for manipulating SVG/DOM?


FOR NOTING:

  + git for DUMMIES

    - git clone  (create LOCAL[*] from ORIGIN[*])

    - git status  (what the hell is going on)

    - git pull  (changes from ORIGIN[MASTER] to LOCAL[MASTER])
    - modify file
    - git add file  (stage changes for commit)
    - git commit  (commit to LOCAL[MASTER])
    - git push  (push to ORIGIN[MASTER])

  + "timely portfolio" blog has stuff on combining R and D3 via
    'websockets'
    
    http://timelyportfolio.blogspot.co.nz/2012/07/hi-r-and-axys-im-d3js-nice-to-meet-you.html

    Looks like all *drawing* done in D3, just use R for data analysis

  + Hadley Wickham is also looking at D3+R

    New r2d3 project on github

    - first impressions are that this is converting ggplot2 R objects
      to JSON arrays (of arrays) so far
      Presumably, the next step is to write D3 code to render the
      JSON arrays (?)
      
    The D3-js Google group has a thread "correct way to display
    lat/lon data onto a D3.geo projection with fluid 'width' and
    'height'" started by Hadley

    https://groups.google.com/group/d3-js/tree/browse_frm/month/2012-07/09f754d891cdbcfd?rnum=121&_done=%2Fgroup%2Fd3-js%2Fbrowse_frm%2Fmonth%2F2012-07%3F

    Also some stuff in interview Hadly gave to MetaMarkets

    http://metamarkets.com/2012/data-scientist-profile-hadley-wickham/


2012-07-25
----------

THE BIG EXAMPLE:

  + A web page containing a scatterplot (SVG) and a slider.

    The slider controls the "smoothness" of a smoother 
    through the data on the scatterplot.

    The smoother (line in the scatterplot) is updated
    by the web browser talking to R and getting new 
    information to describe the smoother and then
    the SVG scatterplot is modified in place.

    NOT generating an entire new scatterplot from R.

    NOT producing an initial plot with all possible 
    smoothers and then showing/hiding the appropriate ones.


TODO:

  + Add note about RStatServer (RSOAP, RSessionDA, R-Zope?)

    All Greg Warnes stuff that appears abandoned?

    http://research.warnes.net/statcomp/projects/RStatServer/   

  + Set up git repos for working with Paul

  + Investigate some more R-web tech (Rook and R-Node and websockets)

  + Keep thinking about categorisation of different options
    (including diagram and glossary)

  + Document the example code (and ALL example code from now on!)

  + Explore javascript libraries for manipulating SVG/DOM?


PAUL TODO:

  + READ Simon's notes

  + Email Jay Emerson


DONE:

  + Overview of ways to set up R as web back-end

    See 2012-07-25/notes-2012-07-17.txt (Org-mode doc)


2012-07-17
----------

PAUL DONE:

  + Check timings and deadlines with Arden for Master Thesis

    Simon is officially part-time, so has until Sem 2 2013 to finish!


TODO:

  + Overview of ways to set up R as web back-end

    RFirefox
    SNetscape
    Rserve
    RSOAP
    R.NET.Web
    Rpad
    RApache
    Rcgi
    Rook
    FastRWeb
    RStudio
    webSockets
    ...

    - find them all 
        - Google
        - R-forge
        - R-help
        - http://www.sciviews.org/_rgui/
        - GSoC

    - document them all
        - short description
        - feature list
        - categorisation (client/server, ...)
        - state (active, dead, developing)
        - who is involved
        - pros and cons

    - implement a simple example
        - a single SVG circle that on-click is modified BY R
          (e.g., R selects a new random location for the circle)


IDEAS:

  + Another reason to "flatten" the grid display list
    (flattening would take gTrees and replace them with
     their children [being careful to store all relevant 
     info for correctly drawing the children in the children])

    Could then have a combination of viewports and grobs where
    you could draw more "efficiently" by creating each viewport
    and then drawing ALL grobs in that viewport
    (no need to get going back into and out of the same viewport)
    => things like clipping become easier
    (have a clean tree structure)


2012-06-22
----------

+ Masters degree Guidelines

  http://www.auckland.ac.nz/webdav/site/central/shared/for/current-students/postgraduate-students/documents/publications/masters-handbook.pdf

+ Main idea is system for creating dynamic interactive plots

+ Probably based on gridSVG, but with R as live back-end to update
  SVG on-the-fly

+ Competing projects are the usual suspects 
  (protovis, Google Viz API, ...)

  PLUS Duncan Temple-Lang's
  - SVGAnnotation
  - R embedded in Firefox

  PLUS Simon Urbanek's projects
  - FastRWeb (and R graphics)
  - WebGL and WS+Rserve

+ Also see some of the discussion on GSOC 2012 about interactive web 
  graphics.

  Matt Shotwell has some good ideas about a "grammar" or "language"
  for expressing interactive graphics

+ Awwation for animated zooming presentation slides

  http://adityabhatt.wordpress.com/2012/04/06/writing-a-prezi-clone-with-html5-svg-and-javascript/

  Useful comments on SVG vs Canvas 

  Nice example demo linked at the bottom.

+ Sasha Goodman wants to combine 'gridSVG' and D3 

  http://vis.stanford.edu/papers/d3

  See email discussion in 'gridSVG' folder (2012-04)


Simon's BIG IDEA:

  + Keep R in the picture.

    Rather than ...

    R -> SVG -> Browser

    ... do something like ...

    R <-> (SVG <->) browser

  + Applications:

    - VIT done better (Chris Wild's stuff)

    - Plot "templates" that you can choose the data for

    - Dynamic reporting

  
INFO:

  + Masters (following BSc honours)
 
  + 6 paper project (instead of 2)

    => 90 points

    => "Thesis"

  + 2 papers already done


PAUL TODO:

  + Check timings and deadlines with Arden for Master Thesis

