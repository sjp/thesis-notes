
2012-09-26
----------

DISCUSS:

  + Publish gridSVG viewport coordinates vignette as Stats Dept
    Tech Report ?  With me as co-author ?

  + Need a specific complaint about source() method in 'XML',
    ideally with nice self-contained example, before I can 
    email Duncan TL

  + Rook plotting example (check it's just static plots)

     http://r.789695.n4.nabble.com/creating-graphs-using-Rook-tp4643458.html


PAUL DONE:

  + Comments on viewport coordinates vignette

    - It is looking REALLY GOOD!

    - page 1, bottom, "retain the original +grid coordinate systems+"
    - page 2, show the image that is produced by the code
    - page 2, after first sentence below code, 
      "The important point is that we want to add new drawing
       *relative to* the axis coordinate systems"
    - page 2, above second code, 
      "(See the "x" and "y" attributes in the <use> elements below"
      OR
      page 2, bottom para, shift above the code.
    - page 3, above section break, mention that javascript functions
      are also exported to make use of this data "(see next section)"
    - page 3, bottom, "+This loads the SVG image+"
    - page 4, first para, "of the viewport" should be "of a grob" ?
    - page 4, middle, description of viewportConvertX/Y need updating?
    - page 4, bottom, "main panel" should be "viewport 'panelvp'
      (the plot region)"
    - page 5, code, mention that circle radius is just in pixels,
      but it could also be converted (or even convert it!)
    - page 5, end of section, I have changed my mind:  I think do NOT
      refer forward to future sections, just mention that there are
      more sophisticated applications.  In your thesis, some forward
      pointers might be useful to tie sections together, but I think
      we can keep this document stand-alone for now.
    - page 5, new section, make it clear that this can be a new R
      session, separate from the R session that created the original
      image (and not needing any of the code or even packages that
      were used to create the original image).
    - page 6, middle, why is the result of gridSVGCoords() not 
      assigned anywhere?
    - page 6, bottom, "also available in +R+" ???
    - page 7, again, having changed my mind, do NOT refer forward,
      just mention the possible more complex applications.
    

2012-09-19
----------

DISCUSS:
 
  + possible viewport name problem ... ?

pushViewport(viewport(name="A"))
popViepwort()
# Viewport with same path, but different coordinates
pushViewport(viewport(name="A", xscale=c(0, 100)))
gridToSVG()

    - No problem for <g> IDs 
    - ONLY problem is matching <g> IDs to coordinate information in JSON
    - SOLUTION:  brute force = record separate coordinate info for each ID
      (fancier solution would involve separate coordinate info as needed
       PLUS more complex coordinate info lookup, but probably not worth it)


TODO:

  + Reimplement SVG comments in 'gridSVG' as their own sort of grob
    (NOT necessarily attached to a existing grob)

  + For the record:  what happens with NAs ?
    In particular, what happens with naming of SVG elements ?
    (if value i is NA then is element (i+1) called "name-i" or "name-(i+1)"?
     and what should it be?)
    
  + Get the plot y-scale to dynamically update!
    (without reproducing the entire plot)
    e.g., generate new scale grobs + coord info
    (i.e., MODIFY the viewport!)

  + support for new ggplot2

grobToDev.gtable <- build either a c("gtableParent", "gTree") or 
                    c("gtableChild", "gtableParent", "gTree")

grobToDev.gtableChild <- enforce wrapvp, NextMethod(), unwind

grobToDev.gtableParent <- enforce layoutvp, same as gTree, unwind
  
  + Keep writing a vignette for 'gridSVG' for the viewport coordinate
    export/import/use in javascript

    - Develop as Dept Tech Report?

  + Need a more "real" example

    - Stripped down version of one of Chris's simulation movies?
    - Reimplement some of the googleViz style plots?
    - Gapminder style plots ?

  + Keep thinking about categorisation of different options
    (including diagram and glossary)


DONE:

  + gridToSVG() should not have to xmlParse(doctxt), just return
    svgroot

  + Use <symbol> elements for data symbols

    - implement in gridSVG (animate.R)

  + Also see updates to 'gridSVG' (inst/doc/changes.txt)

    - raster grobs now produce inline SVG
    - points grobs now implemented as <symbol>s and <use>s
      (and the package has shed about 1000 lines of code)


2012-09-12
----------

DISCUSS:

  + A selection of Keith Ng's data viz efforts

    http://publicaddress.net/who-is-keith-ng-1/

  + NZ Herald's "first online interactive infographic"

    http://www.nzherald.co.nz/crime/news/article.cfm?c_id=30&objectid=10833156

  + Slides for talk on interactive graphics

    http://dl.dropbox.com/u/7586336/RSS2012/googleVis_at_RSS_2012.html

    including list of technologies

    http://dl.dropbox.com/u/7586336/RSS2012/googleVis_at_RSS_2012.html#%287%29

    and mention that Google Viz API includes ability to "edit" plots
    (similar to dialog boxes for editing Excel charts)

    http://dl.dropbox.com/u/7586336/RSS2012/googleVis_at_RSS_2012.html#%2834%29

  + Article on "Generalized pairs plots"

    http://amstat.tandfonline.com/doi/full/10.1080/10618600.2012.694762

    Mentions "interactive graphics challenges" at the end


TODO:

  + For the record:  what happens with NAs ?
    In particular, what happens with naming of SVG elements ?
    (if value i is NA then is element (i+1) called "name-i" or "name-(i+1)"?
     and what should it be?)
    
  + gridToSVG() should not have to xmlParse(doctxt), just return
    svgroot

  + Get the plot y-scale to dynamically update!
    (without reproducing the entire plot)
    e.g., generate new scale grobs + coord info
    (i.e., MODIFY the viewport!)

  + Use <symbol> elements for data symbols

    - implement in gridSVG (animate.R)

  + Keep writing a vignette for 'gridSVG' for the viewport coordinate
    export/import/use in javascript

  + Need a more "real" example

    - Stripped down version of one of Chris's simulation movies?
    - Reimplement some of the googleViz style plots?
    - Gapminder style plots ?

  + Keep thinking about categorisation of different options
    (including diagram and glossary)


DONE:

  + Read Jimmy Oh's LitReview (graphical tools section)

  + Use 'XML' to generate SVG content in 'gridSVG'

    - this should be FASTER
    - should make code less ugly (svg.R)
    - generates SVG in memory so have option to not create file
      AND can just return content as XML objects AND can 
      easily return just FRAGMENTS of SVG content AND
      get greater control over structure of SVG content
      (e.g., can insert nodes anywhere in XML tree at any time)
      AND will get better and automatic indentation !

  + Started using <symbol> elements for data symbols


PAUL DONE:

  + Comments on vignette draft 
    "Working with the gridSVG Coordinate System"

    - To turn this into an article, we would need a brief
      review of grid and gridSVG at the start.  I could do that
      unless you want to have a go.

    - First para, instead of "everything" maybe say "all locations
      and dimensions of graphical objects", or even more explicitly,
      "rather than being positioned within a viewport, all drawing
      is within a single pixel-based coordinate system".  Maybe also
      mention that this happens because 'grid' viewports do not
      translate directly to SVG <g> elements with 'transform' 
      attributes.

    - top of page 2, give an explicit (small) example to show x/y 
      locations in SVG to show that they are pixel coordinates that
      are NOT the same as the original x/y values specified in the
      'grid' calls

    - middle of page 2, also mention that viewport *names* are 
      recorded (plus last sentence of the same paragraph is a
      bit awkward => reword somehow)

    - Maybe use JS> as prompt for javascript code and R> as prompt
      for R code (?)

    - Maybe allow viewportConvertX/Y() to convert to anything 
      (like viewportConvertWidth/Height()) - even if it is not 
      used much, if it is possible, someone will want to do it 
      sometime.

    - end of section page 4, although you have (rightly) focused
      on a simple example that just requires R, you could foreshadow 
      later sections that will use this capability to implement
      interactive image manipulation in browser via javascript.
      Just a simple sentence that points the reader forward to
      later sections (to be written).

    - end of section page 6, similar, but this time foreshadow
      use of this capability to callback to R from browser.


2012-09-05
----------

DISCUSS:

  + Change regular meeting time to Wednesday 2-3 !

  + Time series document is excellent!

    Only one thought:  have you tried simply replacing old content
    with new content (rather than using new values to transition 
    existing content) ?

    One reason:  if you replace OLD with NEW, you might lose some
    useful attributes on OLD (PLUS you wouldn't be able to do the
    fancy D3 transitions)

  + David Bank's SVG embedded in HTML with javascript glue

    Easier or harder to have R as server ?  (less javascript)

  + Ok to give Jimmy Oh example of Simon's documentation ?


TODO:

  + Read Jimmy Oh's LitReview (graphical tools section)

  + Use 'XML' to generate SVG content in 'gridSVG'

    - this should be FASTER
    - should make code less ugly (svg.R)
    - generates SVG in memory so have option to not create file
      AND can just return content as XML objects AND can 
      easily return just FRAGMENTS of SVG content AND
      get greater control over structure of SVG content
      (e.g., can insert nodes anywhere in XML tree at any time)
      AND will get better and automatic indentation !

  + Get the plot y-scale to dynamically update!
    (without reproducing the entire plot)
    e.g., generate new scale grobs + coord info
    (i.e., MODIFY the viewport!)

  + Use <symbol> elements for data symbols

    - implement in gridSVG (animate.R)

  + Keep writing a vignette for 'gridSVG' for the viewport coordinate
    export/import/use in javascript

  + Need a more "real" example

    - Stripped down version of one of Chris's simulation movies?
    - Reimplement some of the googleViz style plots?
    - Gapminder style plots ?

  + Keep thinking about categorisation of different options
    (including diagram and glossary)


DONE:

  + name coord info by viewport *path* 
    (plus name mangle to ensure uniqueness)
    [watch out for path separator being invalid ID char]

  + Use <symbol> elements for data symbols?

    - better than <g> solution we currently have because
      simpler, faster (only one <symbol> then lots of <use>s)

      BUT only if animation of <symbol> works
      (e.g., animating 'width' of <symbol> does NOT scale 'width'
       of lines drawn within <symbol>)

      (OR animation of <use> works)

    SEE examples/svg-symbols/point-symbol-test.svg

    Summary:  looks promising

  + Write a vignette for 'gridSVG' for the viewport coordinate
    export/import/use in javascript

    - simple example to show export
    - simple javascript to add point relative to plot scales
    - "simple" manipulate SVG within R (via 'XML' package) to
      show import 

  + Add 'RJSONIO' as dependency for 'gridSVG'


PAUL TODO:

  + Produce example documentation from Simon's .org files

    C-c C-e then, e.g., 'H' for temp HTML buffer

  + Read the vignette draft


2012-08-28
----------

TODO:

  + Get the plot y-scale to dynamically update!
    (without reproducing the entire plot)
    e.g., generate new scale grobs + coord info
    (i.e., MODIFY the viewport!)

  + name coord info by viewport *path* 
    (plus name mangle to ensure uniqueness)
    [watch out for path separator being invalid ID char]

  + Use <symbol> elements for data symbols?

    - better than <g> solution we currently have because
      simpler, faster (only one <symbol> then lots of <use>s)

      BUT only if animation of <symbol> works
      (e.g., animating 'width' of <symbol> does NOT scale 'width'
       of lines drawn within <symbol>)

      (OR animation of <use> works)

  + Write a vignette for 'gridSVG' for the viewport coordinate
    export/import/use in javascript

    - simple example to show export
    - simple javascript to add point relative to plot scales
    - "simple" manipulate SVG within R (via 'XML' package) to
      show import 

  + Add 'RJSONIO' as dependency for 'gridSVG'

  + Need a more "real" example

    - Stripped down version of one of Chris's simulation movies?
    - Reimplement some of the googleViz style plots?
    - Gapminder style plots ?

  + Keep thinking about categorisation of different options
    (including diagram and glossary)


DONE:

  + MAKE SURE YOU put your name on everything you do

  + Document the new examples (at least novel features of them)

    See examples/time-series/time-series.org

  + export javascript coordinate conversion functions from 'gridSVG'
    (controlled by arg just like coordinate info)

  + add R coordinate conversion functions to 'gridSVG'

  + Document the new 'gridSVG' features

    see gridSVG!


2012-08-21
----------

DISCUSS:

  + Sasha Goodman asks:

    "Do you know if websockets can handle high volumes of users?"
 
  + Nunez example


NOTES:

  + R event handler code needs to be able to see the coordinate info
    that goes with the SVG file that is calling back to it ?

    In other words, do we need conversion functions in R to
    convert between coordinate systems in the SVG image?

    Yes, at least sometimes.  Best option is to provide this so
    that people can either generate values in R and then convert 
    them in javascript OR generate and convert in R and just 
    send px values back to javascript.  Allows developer to  
    choose whichever is easiest.

    It is NOT completely mental because, although the coordinate info
    is already available in R when you *draw* the image (using grid
    and gridSVG), a new R session that the SVG code talks to has
    NO IDEA about the structure of the SVG image unless we send
    it to the new R session.

  + How to send coordinate info to R?  Only once up front or every
    time you make a request?  

    BOTH!  Have a "global" default, but allow per-request as well.

coinfogen <- function() { 
    info <- NULL
    function(newinfo=NULL) { 
        if (is.null(newinfo)) { 
            info 
        } else { 
            info <<- newinfo 
        }
    } 
}

> coinfo <- coinfogen()
> coinfo()
NULL
> coinfo(1)
> coinfo()
[1] 1


TODO:

  + MAKE SURE YOU put your name on everything you do

  + export javascript coordinate conversion functions from 'gridSVG'
    (controlled by arg just like coordinate info)

  + add R coordinate conversion functions to 'gridSVG'

  + Document the new examples (at least novel features of them)

  + Document the new 'gridSVG' features

  + Need a more "real" example

    - Stripped down version of one of Chris's simulation movies?
    - Reimplement some of the googleViz style plots?
    - Gapminder style plots ?

  + Keep thinking about categorisation of different options
    (including diagram and glossary)


DONE:

  + Export viewport transforms to SVG

    See examples/time-series/       (use google-chrome!)
        examples/unit-conversion/   (including unit tests!!!)
        examples/unit-conversion/coords.js  (example coordinate info)
        examples/unit-conversion/conversion.js  (conversion functions)
        examples/unit-conversion/location-test.html  (example usage)

    Also see gridsvg/ (to capture coordinate info and export it)


2012-08-14
----------

DISCUSS:

  + Extend the interactive campus map ?
    (William's project from a couple of years back)

  + Link to "Grammar of Graphics" Google group from Hadley

    https://groups.google.com/group/gsofgs


TODO:

  + Export viewport transforms to SVG

    - keep going

  + Need a more "real" example

    - Stripped down version of one of Chris's simulation movies?
    - Reimplement some of the googleViz style plots?
    - Gapminder style plots ?

  + Keep thinking about categorisation of different options
    (including diagram and glossary)


DONE: 

  + Export viewport transforms to SVG

    - current.transform() gets (some of) the info 
    - devGrob.viewport() needs to add the info 
    - svgStartGroup() needs to accumulate the info
    - svgClose() needs to write the info out (as JSON?)
    - also need to write a bunch of standard javascript functions
      to do the transformations, culminating in ...

      viewportConvertX(vpname, x, from, to)
      viewportConvertY(vpname, x, from, to)
      viewportConvertWidth(vpname, x, from, to)
      viewportConvertHeight(vpname, x, from, to)
    

PAUL DONE:

  + emailed Hadley Wickham, Jay Emerson, and Sasha Goodman just to let
    them know that we are working in the area (they are all doing  
    things vaguely similar).  This serves both to politely carve out
    a little space for ourselves and to create an opportunity for 
    feedback and ideas and examples from these other guys.


2012-08-09
----------

NOTES:

  + Simon's examples/websockets/smoother-example/
    is wildly good because it is the browser and R communicating
    to update the *graphics* DOM. 
    In particular, it is NOT just asking R for a completely new plot.
    It talks to R to get new information to MODIFY existing components
    of an existing plot (SVG DOM).

  + Also implemented the example with FastRWeb and Rook
    BUT FastRWeb is a pain in the ass to install/configure

  + In the websockets model, R sends messages to browser AND browser 
    sends messages to R.
    In the Rook (http) model, browser sends request to R and R 
    generates response.

  + There appear to be several people working on side-stepping R
    or reproducing R graphics in javascript (D3).
    The advantage of our approach is that we get (almost) all
    plots that grid can produce PLUS the grid graphics infrastructure
    (viewports etc) and THEN we can use D3 to manipulate it.
    => don't have to reimplement R/grid graphics (visible) output in javascript
    AND don't have to reimplement R/grid graphics (invisible) infrastructure


FOR NOTING:

  + Slides from Jay Emerson from JSM talk
    (see Resources/MikeSession.pdf)

  + Duncan Temple Lang (and Gabriel Becker) gave presentation at JSM
    on "RBrowserPlugin framework".  Can't find any other links to
    this, but it sounds like RFirefox (?)

  + project 'gg' on github

    https://github.com/gigamonkey/gg

    Allows Grammar of Graphics style description of plot
    and renders it using javascript (D3)

    Any interactivity???


TODO:

  + Export viewport transforms to SVG

    - current.transform() gets (some of) the info 
    - devGrob.viewport() needs to add the info 
    - svgStartGroup() needs to accumulate the info
    - svgClose() needs to write the info out (as JSON?)
    - also need to write a bunch of standard javascript functions
      to do the transformations, culminating in ...

      viewportConvertX(vpname, x, from, to)
      viewportConvertY(vpname, x, from, to)
      viewportConvertWidth(vpname, x, from, to)
      viewportConvertHeight(vpname, x, from, to)
    
  + Need a more "real" example

    - Stripped down version of one of Chris's simulation movies?
    - Reimplement some of the googleViz style plots?
    - Gapminder style plots ?

  + Keep thinking about categorisation of different options
    (including diagram and glossary)


DONE:

  + Can you use D3 to muck about with existing SVG?
    Can it be used as an "SVG accelerator" to render faster?

  + Push the three candidate R-as-web-server options (glossary!)
    a bit harder by trying to implement a more complex example
    (see "BIG EXAMPLE" below)

  + New D3 demo (see examples/d3/ggplot-demo.html)

  + Reorganize git repo

    - instead of 2012-07-25/2012-07-25.org 
      have litreview.org (at top level)

    - instead of 2012-07-25/Rook/ etc
      have Examples/Rook/
  

2012-07-31
----------

IDEA:

  + modify 'gridSVG' to auto-insert a javascript function, say convert(), 
    into SVG output (plus an array of constants) that effectively 
    records the coordinate system conversions for every 'grid'
    viewport.  Then you can easily write javascript code to 
    do things like add a new shape at a location within a viewport
    (SVG <g>) that are positioned relative to the "native" coordinate
    system of the original 'grid' viewport (e.g., draw stuff relative
    to plot axis scales)


TODO:

  + Reorganize git repo

    - instead of 2012-07-25/2012-07-25.org 
      have litreview.org (at top level)

    - instead of 2012-07-25/Rook/ etc
      have Examples/Rook/

  + Can you use D3 to muck about with existing SVG?
    Can it be used as an "SVG accelerator" to render faster?

  + Push the three candidate R-as-web-server options (glossary!)
    a bit harder by trying to implement a more complex example
    (see "BIG EXAMPLE" below)

  + Keep thinking about categorisation of different options
    (including diagram and glossary)


PAUL TODO:

  + Read Simon's notes


DONE:

  + Investigate some more R-web tech (Rook and R-Node and websockets)

    Executive summary:

    - Three possible candidates so far:  FastRWeb, Rook, and websockets

  + Add note about RStatServer (RSOAP, RSessionDA, R-Zope?)

    All Greg Warnes stuff that appears abandoned?

    http://research.warnes.net/statcomp/projects/RStatServer/   

  + Set up git repos for working with Paul

  + Keep thinking about categorisation of different options
    (including diagram and glossary)

  + Document the example code (and ALL example code from now on!)

    See 2012-07-25/*/ and 2012-07-25/*.org
    (e.g., 2012-07-25/Rook/ and 2012-07-25/Rook-example.org)

  + Explore javascript libraries for manipulating SVG/DOM?


FOR NOTING:

  + git for DUMMIES

    - git clone  (create LOCAL[*] from ORIGIN[*])

    - git status  (what the hell is going on)

    - git pull  (changes from ORIGIN[MASTER] to LOCAL[MASTER])
    - modify file
    - git add file  (stage changes for commit)
    - git commit  (commit to LOCAL[MASTER])
    - git push  (push to ORIGIN[MASTER])

  + "timely portfolio" blog has stuff on combining R and D3 via
    'websockets'
    
    http://timelyportfolio.blogspot.co.nz/2012/07/hi-r-and-axys-im-d3js-nice-to-meet-you.html

    Looks like all *drawing* done in D3, just use R for data analysis

  + Hadley Wickham is also looking at D3+R

    New r2d3 project on github

    - first impressions are that this is converting ggplot2 R objects
      to JSON arrays (of arrays) so far
      Presumably, the next step is to write D3 code to render the
      JSON arrays (?)
      
    The D3-js Google group has a thread "correct way to display
    lat/lon data onto a D3.geo projection with fluid 'width' and
    'height'" started by Hadley

    https://groups.google.com/group/d3-js/tree/browse_frm/month/2012-07/09f754d891cdbcfd?rnum=121&_done=%2Fgroup%2Fd3-js%2Fbrowse_frm%2Fmonth%2F2012-07%3F

    Also some stuff in interview Hadly gave to MetaMarkets

    http://metamarkets.com/2012/data-scientist-profile-hadley-wickham/


2012-07-25
----------

THE BIG EXAMPLE:

  + A web page containing a scatterplot (SVG) and a slider.

    The slider controls the "smoothness" of a smoother 
    through the data on the scatterplot.

    The smoother (line in the scatterplot) is updated
    by the web browser talking to R and getting new 
    information to describe the smoother and then
    the SVG scatterplot is modified in place.

    NOT generating an entire new scatterplot from R.

    NOT producing an initial plot with all possible 
    smoothers and then showing/hiding the appropriate ones.


TODO:

  + Add note about RStatServer (RSOAP, RSessionDA, R-Zope?)

    All Greg Warnes stuff that appears abandoned?

    http://research.warnes.net/statcomp/projects/RStatServer/   

  + Set up git repos for working with Paul

  + Investigate some more R-web tech (Rook and R-Node and websockets)

  + Keep thinking about categorisation of different options
    (including diagram and glossary)

  + Document the example code (and ALL example code from now on!)

  + Explore javascript libraries for manipulating SVG/DOM?


PAUL TODO:

  + READ Simon's notes

  + Email Jay Emerson


DONE:

  + Overview of ways to set up R as web back-end

    See 2012-07-25/notes-2012-07-17.txt (Org-mode doc)


2012-07-17
----------

PAUL DONE:

  + Check timings and deadlines with Arden for Master Thesis

    Simon is officially part-time, so has until Sem 2 2013 to finish!


TODO:

  + Overview of ways to set up R as web back-end

    RFirefox
    SNetscape
    Rserve
    RSOAP
    R.NET.Web
    Rpad
    RApache
    Rcgi
    Rook
    FastRWeb
    RStudio
    webSockets
    ...

    - find them all 
        - Google
        - R-forge
        - R-help
        - http://www.sciviews.org/_rgui/
        - GSoC

    - document them all
        - short description
        - feature list
        - categorisation (client/server, ...)
        - state (active, dead, developing)
        - who is involved
        - pros and cons

    - implement a simple example
        - a single SVG circle that on-click is modified BY R
          (e.g., R selects a new random location for the circle)


IDEAS:

  + Another reason to "flatten" the grid display list
    (flattening would take gTrees and replace them with
     their children [being careful to store all relevant 
     info for correctly drawing the children in the children])

    Could then have a combination of viewports and grobs where
    you could draw more "efficiently" by creating each viewport
    and then drawing ALL grobs in that viewport
    (no need to get going back into and out of the same viewport)
    => things like clipping become easier
    (have a clean tree structure)


2012-06-22
----------

+ Masters degree Guidelines

  http://www.auckland.ac.nz/webdav/site/central/shared/for/current-students/postgraduate-students/documents/publications/masters-handbook.pdf

+ Main idea is system for creating dynamic interactive plots

+ Probably based on gridSVG, but with R as live back-end to update
  SVG on-the-fly

+ Competing projects are the usual suspects 
  (protovis, Google Viz API, ...)

  PLUS Duncan Temple-Lang's
  - SVGAnnotation
  - R embedded in Firefox

  PLUS Simon Urbanek's projects
  - FastRWeb (and R graphics)
  - WebGL and WS+Rserve

+ Also see some of the discussion on GSOC 2012 about interactive web 
  graphics.

  Matt Shotwell has some good ideas about a "grammar" or "language"
  for expressing interactive graphics

+ Awwation for animated zooming presentation slides

  http://adityabhatt.wordpress.com/2012/04/06/writing-a-prezi-clone-with-html5-svg-and-javascript/

  Useful comments on SVG vs Canvas 

  Nice example demo linked at the bottom.

+ Sasha Goodman wants to combine 'gridSVG' and D3 

  http://vis.stanford.edu/papers/d3

  See email discussion in 'gridSVG' folder (2012-04)


Simon's BIG IDEA:

  + Keep R in the picture.

    Rather than ...

    R -> SVG -> Browser

    ... do something like ...

    R <-> (SVG <->) browser

  + Applications:

    - VIT done better (Chris Wild's stuff)

    - Plot "templates" that you can choose the data for

    - Dynamic reporting

  
INFO:

  + Masters (following BSc honours)
 
  + 6 paper project (instead of 2)

    => 90 points

    => "Thesis"

  + 2 papers already done


PAUL TODO:

  + Check timings and deadlines with Arden for Master Thesis

