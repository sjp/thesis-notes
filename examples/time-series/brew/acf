<%

get.vars <- req$GET()
p <- if (! is.null(get.vars$p)) as.numeric(get.vars$p) else 0
q <- if (! is.null(get.vars$q)) as.numeric(get.vars$q) else 0
outFormat <- if (! is.null(get.vars$format)) as.character(get.vars$format) else "SVG"

# In the case where we have been given some coordinate information
# to use *per request*, set coordsInfo(), also assume for this
# example that the only thing that could be posted is coordinates
# information
if (req$post()) {
  cinfo <- Utils$unescape(req$POST()[["coords"]])

  # Update the coordinate information with new information
  # when present, overwrite if names clash. Do not remove
  # existing information
  currCoords <- coordsInfo()
  if (is.null(currCoords)) {
    coordsInfo(fromJSON(cinfo))
  } else {
    newCoords <- fromJSON(cinfo)
    keepOldName <- ! names(currCoords) %in% names(newCoords)
    if (any(keepOldName)) {
      existingNames <- names(currCoords)[keepOldName]
      for (i in 1:length(existingNames)) {
        newCoords[[existingNames[i]]] <- currCoords[[existingNames[i]]]
      }
    }
    coordsInfo(newCoords)
  }
}

# Make sure the response is XML
res$header("Content-Type", "image/svg+xml")
svg.header <- '<svg xmlns="http://www.w3.org/2000/svg" width="300" height="300">'
svg.footer <- '</svg>'

acfSVG <- function(p, q) {
  heights <- acf(residuals(arima(armaDataset(), order = c(p, 0, q))),
                 plot = FALSE, lag.max = 48)$acf
  xs <- 1:length(heights) / (length(heights) + 1) 
  xs <- c(rbind(xs, xs))
  xs <- viewportConvertX("acfwindowvp", xs, "npc")
  ys <- c(rbind(rep(0, length(heights)), heights))
  ys <- viewportConvertY("acfwindowvp", ys, "native")
  points <- paste(xs, ys, sep = ",")

  line.pairs <- character(length(points) / 2)
  for (i in 1:(length(points) / 2)) {
    line.pairs[i] <- paste0(points[2 * i - 1], " ", points[2 * i])
  }

  line.pairs
}

pacfSVG <- function(p, q) {
  heights <- pacf(residuals(arima(armaDataset(), order = c(p, 0, q))),
                  plot = FALSE, lag.max = 48)$acf
  xs <- 1:length(heights) / (length(heights) + 1) 
  xs <- c(rbind(xs, xs))
  xs <- viewportConvertX("pacfwindowvp", xs, "npc")
  ys <- c(rbind(rep(0, length(heights)), heights))
  ys <- viewportConvertY("pacfwindowvp", ys, "native")
  points <- paste(xs, ys, sep = ",")

  line.pairs <- character(length(points) / 2)
  for (i in 1:(length(points) / 2)) {
    line.pairs[i] <- paste0(points[2 * i - 1], " ", points[2 * i])
  }

  line.pairs
}

acf.line.pairs <- acfSVG(p, q)
pacf.line.pairs <- pacfSVG(p, q)

%>
<%
if (outFormat == "SVG") {
  brew("acfSVG")
} else if (outFormat == "JSON") {
  brew("acfJSON")
}
%>
