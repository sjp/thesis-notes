<%
library(selectr)
library(gridSVG)
library(ggplot2)

project <- function(refloc, otherloc, dist) {
    if (dist == 0)
        return(refloc)
    diff <- refloc - otherloc
    rat <- dist / sqrt(sum(diff^2))
    refloc - diff * rat
}

distmat <- as.matrix(eurodist)
locs <- cmdscale(eurodist)
# Not necessary but keeping consistent with the reference impl.
locs[, 2] <- - locs[, 2]
citynames <- rownames(locs)
ncities <- nrow(locs)

# Pre-allocate matrices, one for xs, one for ys
# Assign names too
xlocs <- matrix(numeric(ncities^2), ncol = ncities)
ylocs <- matrix(numeric(ncities^2), ncol = ncities)

for (i in 1:ncities) {
    for (j in 1:ncities) {
        newloc <- project(locs[i, ], locs[j, ], distmat[i, j])
        xlocs[i, j] <- newloc[1]
        ylocs[i, j] <- newloc[2]
    }
}

pdf(file = NULL)
grid.newpage()
pushViewport(dataViewport(locs[, 1], locs[, 2],
                          width = 0.8, height = 0.8))
vp <- dataViewport(locs[, 1], locs[, 2],
                   clip = TRUE, name = "panel")
grid.xaxis(name = "xaxis")
grid.yaxis(name = "yaxis")
pushViewport(vp)
grid.rect(name = "border")
grid.points(locs[, 1], locs[, 2], pch = 16,
            gp = gpar(col = "blue"), name = "locpoints")
grid.text(citynames, locs[, 1], locs[, 2],
          default.units = "native", name = "loctext")

gsvg <- gridToSVG(NULL, "none", "none")
dev.off()

# Clear out any existing coord info, then apply
gridSVGCoords(NA)
gridSVGCoords(gsvg$coords)

panelvp <- grep(".*panel\\..*", names(gridSVGCoords()), value = TRUE)

# Now lets convert these x/y locations into SVG coordinates
locs[, 1] <- sapply(locs[, 1], function(x) viewportConvertX(panelvp, x, "native"))
locs[, 2] <- sapply(locs[, 2], function(x) viewportConvertY(panelvp, x, "native"))
xlocs <- sapply(xlocs, function(x) viewportConvertX(panelvp, x, "native"))
xlocs <- matrix(xlocs, ncol = ncities)
ylocs <- sapply(ylocs, function(x) viewportConvertY(panelvp, x, "native"))
ylocs <- matrix(ylocs, ncol = ncities)
%>
